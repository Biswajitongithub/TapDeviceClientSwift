//
// VariableAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class VariableAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Get variable address
    * 
    * LWM2M path: /1029/{variableId}/0

    * @param variableId input
    * @return Int api call
    */
    public func getAddressRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/0"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get variable address
        * 
        * LWM2M path: /1029/{variableId}/0
        
        * @param variableId input
        * @return Int api call
        */
        public func getAddress(
            variableId: Int
        ) throws -> ApiResponse<Int>{
            let request : ApiRequest<Void> = self.getAddressRequest(variableId: variableId)
            let converter: TapConverterContainer<Int> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<Int> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get variable bundle id
    * ID du bundle qui contient la variable
    * LWM2M path: /1029/{variableId}/6

    * @param variableId input
    * @return Int api call
    */
    public func getBundleIdRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/6"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get variable bundle id
        * ID du bundle qui contient la variable
        * LWM2M path: /1029/{variableId}/6
        
        * @param variableId input
        * @return Int api call
        */
        public func getBundleId(
            variableId: Int
        ) throws -> ApiResponse<Int>{
            let request : ApiRequest<Void> = self.getBundleIdRequest(variableId: variableId)
            let converter: TapConverterContainer<Int> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<Int> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get variable bundle values
    * 
    * LWM2M path: /1029/{variableId}/7

    * @param variableId input
    * @return Int api call
    */
    public func getBundleValuesRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/7"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get variable bundle values
        * 
        * LWM2M path: /1029/{variableId}/7
        
        * @param variableId input
        * @return Int api call
        */
        public func getBundleValues(
            variableId: Int
        ) throws -> ApiResponse<Int>{
            let request : ApiRequest<Void> = self.getBundleValuesRequest(variableId: variableId)
            let converter: TapConverterContainer<Int> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<Int> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get access rights for the variable
    * Get access rights for the variable (read and write)
    * LWM2M path: /1029/{variableId}/3

    * @param variableId input
    * @return ReadWriteRights api call
    */
    public func getCurrentAccessRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/3"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get access rights for the variable
        * Get access rights for the variable (read and write)
        * LWM2M path: /1029/{variableId}/3
        
        * @param variableId input
        * @return ReadWriteRights api call
        */
        public func getCurrentAccess(
            variableId: Int
        ) throws -> ApiResponse<ReadWriteRights>{
            let request : ApiRequest<Void> = self.getCurrentAccessRequest(variableId: variableId)
            let converter: TapConverterContainer<ReadWriteRights> = self.converterProvider.get(id: "ReadWriteRights")
            let response: ApiResponse<ReadWriteRights> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get data format for variable
    * 
    * LWM2M path: /1029/{variableId}/1

    * @param variableId input
    * @return Int api call
    */
    public func getFormatRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/1"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get data format for variable
        * 
        * LWM2M path: /1029/{variableId}/1
        
        * @param variableId input
        * @return Int api call
        */
        public func getFormat(
            variableId: Int
        ) throws -> ApiResponse<Int>{
            let request : ApiRequest<Void> = self.getFormatRequest(variableId: variableId)
            let converter: TapConverterContainer<Int> = self.converterProvider.get(id: "integer_uint8")
            let response: ApiResponse<Int> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get variable array size
    * Get the number of element of the variable
    * LWM2M path: /1029/{variableId}/2

    * @param variableId input
    * @return Int api call
    */
    public func getNumberOfElementsRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/2"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get variable array size
        * Get the number of element of the variable
        * LWM2M path: /1029/{variableId}/2
        
        * @param variableId input
        * @return Int api call
        */
        public func getNumberOfElements(
            variableId: Int
        ) throws -> ApiResponse<Int>{
            let request : ApiRequest<Void> = self.getNumberOfElementsRequest(variableId: variableId)
            let converter: TapConverterContainer<Int> = self.converterProvider.get(id: "integer_uint8")
            let response: ApiResponse<Int> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get variable value
    * Value of array of values. The size depends of variable format
    * LWM2M path: /1029/{variableId}/4

    * @param variableId input
    * @return Bytes api call
    */
    public func getValueRequest(
        variableId: Int
    ) -> ApiRequest<Void>{
        var path = "/1029/{variableId}/4"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get variable value
        * Value of array of values. The size depends of variable format
        * LWM2M path: /1029/{variableId}/4
        
        * @param variableId input
        * @return Bytes api call
        */
        public func getValue(
            variableId: Int
        ) throws -> ApiResponse<Bytes>{
            let request : ApiRequest<Void> = self.getValueRequest(variableId: variableId)
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Write variable address
    * 
    * LWM2M path: /1029/{variableId}/0
    * Body converter id: "integer_uint32"

    * @param variableId input

    * @param address input
    * @return  api call
    */
    public func putAddressRequest(
        variableId: Int, address: Int
    ) -> ApiRequest<Int>{
        var path = "/1029/{variableId}/0"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: address
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Write variable address
        * 
        * LWM2M path: /1029/{variableId}/0
        * Body converter id: "integer_uint32"
    
        * @param variableId input

        * @param address input
        * @return  api call
        */
        public func putAddress(
            variableId: Int, address: Int
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Int> = self.putAddressRequest(variableId: variableId, address: address)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write variable bundle id
    * 
    * LWM2M path: /1029/{variableId}/6
    * Body converter id: "integer_uint32"

    * @param variableId input

    * @param value input
    * @return  api call
    */
    public func putBundleIdRequest(
        variableId: Int, value: Int
    ) -> ApiRequest<Int>{
        var path = "/1029/{variableId}/6"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Write variable bundle id
        * 
        * LWM2M path: /1029/{variableId}/6
        * Body converter id: "integer_uint32"
    
        * @param variableId input

        * @param value input
        * @return  api call
        */
        public func putBundleId(
            variableId: Int, value: Int
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Int> = self.putBundleIdRequest(variableId: variableId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set data format of the variable
    * 
    * LWM2M path: /1029/{variableId}/1
    * Body converter id: "integer_uint8"

    * @param variableId input

    * @param value input
    * @return  api call
    */
    public func putFormatRequest(
        variableId: Int, value: Int
    ) -> ApiRequest<Int>{
        var path = "/1029/{variableId}/1"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "integer_uint8")
        )
    }

     /**
        * Set data format of the variable
        * 
        * LWM2M path: /1029/{variableId}/1
        * Body converter id: "integer_uint8"
    
        * @param variableId input

        * @param value input
        * @return  api call
        */
        public func putFormat(
            variableId: Int, value: Int
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Int> = self.putFormatRequest(variableId: variableId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write variable array size
    * Set the number of element of the variable
    * LWM2M path: /1029/{variableId}/2
    * Body converter id: "integer_uint8"

    * @param variableId input

    * @param value input
    * @return  api call
    */
    public func putNumberOfElementsRequest(
        variableId: Int, value: Int
    ) -> ApiRequest<Int>{
        var path = "/1029/{variableId}/2"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "integer_uint8")
        )
    }

     /**
        * Write variable array size
        * Set the number of element of the variable
        * LWM2M path: /1029/{variableId}/2
        * Body converter id: "integer_uint8"
    
        * @param variableId input

        * @param value input
        * @return  api call
        */
        public func putNumberOfElements(
            variableId: Int, value: Int
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Int> = self.putNumberOfElementsRequest(variableId: variableId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set variable value
    * 
    * LWM2M path: /1029/{variableId}/4
    * Body converter id: "Bytes"

    * @param variableId input

    * @param value input
    * @return  api call
    */
    public func putValueRequest(
        variableId: Int, value: Bytes
    ) -> ApiRequest<Bytes>{
        var path = "/1029/{variableId}/4"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Set variable value
        * 
        * LWM2M path: /1029/{variableId}/4
        * Body converter id: "Bytes"
    
        * @param variableId input

        * @param value input
        * @return  api call
        */
        public func putValue(
            variableId: Int, value: Bytes
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Bytes> = self.putValueRequest(variableId: variableId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set variable value
    * Difference with put ? 
    * LWM2M path: /1029/{variableId}/5
    * Body converter id: "Bytes"

    * @param variableId input

    * @param value input
    * @return  api call
    */
    public func setValueRequest(
        variableId: Int, value: Bytes
    ) -> ApiRequest<Bytes>{
        var path = "/1029/{variableId}/5"
        //var regex = "\{([\S]*)\}"
        
        path = path.replacingOccurrences(of: "{"+"variableId"+"}", with: String(variableId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Set variable value
        * Difference with put ? 
        * LWM2M path: /1029/{variableId}/5
        * Body converter id: "Bytes"
    
        * @param variableId input

        * @param value input
        * @return  api call
        */
        public func setValue(
            variableId: Int, value: Bytes
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Bytes> = self.setValueRequest(variableId: variableId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

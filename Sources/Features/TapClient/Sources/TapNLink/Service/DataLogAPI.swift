//
// DataLogAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class DataLogAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Dequeue one packet
    * Dequeue one packet in the FIFO list (Firt In First Out) of datalog packets
    * LWM2M path: /1031//11
    * @return SinglePacket api call
    */
    public func dequeueOnePacketRequest()
         -> ApiRequest<Void>{
        let path = "/1031//11"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Dequeue one packet
        * Dequeue one packet in the FIFO list (Firt In First Out) of datalog packets
        * LWM2M path: /1031//11
                * @return SinglePacket api call
        */
        public func dequeueOnePacket()
             throws -> ApiResponse<SinglePacket>{
            let request : ApiRequest<Void> = self.dequeueOnePacketRequest()
            let converter: TapConverterContainer<SinglePacket> = self.converterProvider.get(id: "SinglePacket")
            let response: ApiResponse<SinglePacket> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Flush data log packets
    * Reinitialisation : efface tous les paquets de la mémoire de l&#39;IoTize. Seulement en état Stop ? Stop implicite avant le flush ? Run implicite après le flush ?
    * LWM2M path: /1031//4
    * @return  api call
    */
    public func flushRequest()
         -> ApiRequest<Void>{
        let path = "/1031//4"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Flush data log packets
        * Reinitialisation : efface tous les paquets de la mémoire de l&#39;IoTize. Seulement en état Stop ? Stop implicite avant le flush ? Run implicite après le flush ?
        * LWM2M path: /1031//4
                * @return  api call
        */
        public func flush()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.flushRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Get the maximum number of packet
    * 
    * LWM2M path: /1024//23
    * @return UInt16 api call
    */
    public func getMaxPacketCountRequest()
         -> ApiRequest<Void>{
        let path = "/1024//23"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get the maximum number of packet
        * 
        * LWM2M path: /1024//23
                * @return UInt16 api call
        */
        public func getMaxPacketCount()
             throws -> ApiResponse<UInt16>{
            let request : ApiRequest<Void> = self.getMaxPacketCountRequest()
            let converter: TapConverterContainer<UInt16> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<UInt16> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get data log options
    * 
    * LWM2M path: /1031//2
    * @return DatalogOption api call
    */
    public func getOptionsRequest()
         -> ApiRequest<Void>{
        let path = "/1031//2"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get data log options
        * 
        * LWM2M path: /1031//2
                * @return DatalogOption api call
        */
        public func getOptions()
             throws -> ApiResponse<DatalogOption>{
            let request : ApiRequest<Void> = self.getOptionsRequest()
            let converter: TapConverterContainer<DatalogOption> = self.converterProvider.get(id: "DatalogOption")
            let response: ApiResponse<DatalogOption> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get number of pending datalog packet
    * Get the number of data log packet available
    * LWM2M path: /1031//10
    * @return UInt16 api call
    */
    public func getPacketCountRequest()
         -> ApiRequest<Void>{
        let path = "/1031//10"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get number of pending datalog packet
        * Get the number of data log packet available
        * LWM2M path: /1031//10
                * @return UInt16 api call
        */
        public func getPacketCount()
             throws -> ApiResponse<UInt16>{
            let request : ApiRequest<Void> = self.getPacketCountRequest()
            let converter: TapConverterContainer<UInt16> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<UInt16> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Write data log crypto key
    * Hash du password Dataloggin. Utilisé (combiné à d&#39;autres choses) pour crypter le paquet avant de le stocker dans l&#39;OutBox.
    * LWM2M path: /1031//3
    * Body converter id: "Bytes"

    * @param value input
    * @return  api call
    */
    public func putCryptoKeyRequest(
        value: Bytes
    ) -> ApiRequest<Bytes>{
        let path = "/1031//3"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Write data log crypto key
        * Hash du password Dataloggin. Utilisé (combiné à d&#39;autres choses) pour crypter le paquet avant de le stocker dans l&#39;OutBox.
        * LWM2M path: /1031//3
        * Body converter id: "Bytes"
    
        * @param value input
        * @return  api call
        */
        public func putCryptoKey(
            value: Bytes
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Bytes> = self.putCryptoKeyRequest(value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write data log option
    * 
    * LWM2M path: /1031//2
    * Body converter id: "DatalogOption"

    * @param value input
    * @return  api call
    */
    public func putOptionsRequest(
        value: DatalogOption
    ) -> ApiRequest<DatalogOption>{
        let path = "/1031//2"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "DatalogOption")
        )
    }

     /**
        * Write data log option
        * 
        * LWM2M path: /1031//2
        * Body converter id: "DatalogOption"
    
        * @param value input
        * @return  api call
        */
        public func putOptions(
            value: DatalogOption
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<DatalogOption> = self.putOptionsRequest(value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Run datalog acquisition
    * Start data log packet acquisition
    * LWM2M path: /1031//0
    * @return  api call
    */
    public func runRequest()
         -> ApiRequest<Void>{
        let path = "/1031//0"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Run datalog acquisition
        * Start data log packet acquisition
        * LWM2M path: /1031//0
                * @return  api call
        */
        public func run()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.runRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Stop datalog acquisition
    * Stop data log packet acquisition
    * LWM2M path: /1031//1
    * @return  api call
    */
    public func stopRequest()
         -> ApiRequest<Void>{
        let path = "/1031//1"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Stop datalog acquisition
        * Stop data log packet acquisition
        * LWM2M path: /1031//1
                * @return  api call
        */
        public func stop()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.stopRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

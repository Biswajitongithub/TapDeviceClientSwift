//
// InterfaceAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class InterfaceAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Get application name
    * 
    * LWM2M path: /1024//9
    * @return String api call
    */
    public func getAppNameRequest()
         -> ApiRequest<Void>{
        var path = "/1024//9"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get application name
        * 
        * LWM2M path: /1024//9
                * @return String api call
        */
        public func getAppName()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getAppNameRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get app path
    * Application Android à lancer ou page HTML à afficher quand l&#39;IoTize est détecté par le téléphone
    * LWM2M path: /1024//11
    * @return String api call
    */
    public func getAppPathRequest()
         -> ApiRequest<Void>{
        var path = "/1024//11"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get app path
        * Application Android à lancer ou page HTML à afficher quand l&#39;IoTize est détecté par le téléphone
        * LWM2M path: /1024//11
                * @return String api call
        */
        public func getAppPath()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getAppPathRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get authorized host protocols
    * 
    * LWM2M path: /1024//17
    * @return ListHostProtocol api call
    */
    public func getAuthorizedHostProtocolRequest()
         -> ApiRequest<Void>{
        var path = "/1024//17"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get authorized host protocols
        * 
        * LWM2M path: /1024//17
                * @return ListHostProtocol api call
        */
        public func getAuthorizedHostProtocol()
             throws -> ApiResponse<ListHostProtocol>{
            let request : ApiRequest<Void> = self.getAuthorizedHostProtocolRequest()
            let converter: TapConverterContainer<ListHostProtocol> = self.converterProvider.get(id: "ListHostProtocol")
            let response: ApiResponse<ListHostProtocol> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get available host protocols
    * 
    * LWM2M path: /1024//21
    * @return ListHostProtocol api call
    */
    public func getAvailableHostProtocolsRequest()
         -> ApiRequest<Void>{
        var path = "/1024//21"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get available host protocols
        * 
        * LWM2M path: /1024//21
                * @return ListHostProtocol api call
        */
        public func getAvailableHostProtocols()
             throws -> ApiResponse<ListHostProtocol>{
            let request : ApiRequest<Void> = self.getAvailableHostProtocolsRequest()
            let converter: TapConverterContainer<ListHostProtocol> = self.converterProvider.get(id: "ListHostProtocol")
            let response: ApiResponse<ListHostProtocol> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get ble address
    * 
    * LWM2M path: /1024//22
    * @return String api call
    */
    public func getBleAddressRequest()
         -> ApiRequest<Void>{
        var path = "/1024//22"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get ble address
        * 
        * LWM2M path: /1024//22
                * @return String api call
        */
        public func getBleAddress()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getBleAddressRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_macaddress")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud client id
    * 
    * LWM2M path: /3//2
    * @return String api call
    */
    public func getCloudClientIdRequest()
         -> ApiRequest<Void>{
        var path = "/3//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud client id
        * 
        * LWM2M path: /3//2
                * @return String api call
        */
        public func getCloudClientId()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCloudClientIdRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud connection mode
    * 
    * LWM2M path: /1024//26
    * @return CloudConnectionMode api call
    */
    public func getCloudConnectionModeRequest()
         -> ApiRequest<Void>{
        var path = "/1024//26"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud connection mode
        * 
        * LWM2M path: /1024//26
                * @return CloudConnectionMode api call
        */
        public func getCloudConnectionMode()
             throws -> ApiResponse<CloudConnectionMode>{
            let request : ApiRequest<Void> = self.getCloudConnectionModeRequest()
            let converter: TapConverterContainer<CloudConnectionMode> = self.converterProvider.get(id: "CloudConnectionMode")
            let response: ApiResponse<CloudConnectionMode> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud gateway url
    * Adresse serveur Web du broker MQTT servant au Cloud. Pour envoyer le datalog par exemple. (Mais PAS pour le Relay MQTT)
    * LWM2M path: /1024//12
    * @return String api call
    */
    public func getCloudGatewayUrlRequest()
         -> ApiRequest<Void>{
        var path = "/1024//12"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud gateway url
        * Adresse serveur Web du broker MQTT servant au Cloud. Pour envoyer le datalog par exemple. (Mais PAS pour le Relay MQTT)
        * LWM2M path: /1024//12
                * @return String api call
        */
        public func getCloudGatewayUrl()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCloudGatewayUrlRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud login id
    * 
    * LWM2M path: /3//2
    * @return String api call
    */
    public func getCloudLoginRequest()
         -> ApiRequest<Void>{
        var path = "/3//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud login id
        * 
        * LWM2M path: /3//2
                * @return String api call
        */
        public func getCloudLogin()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCloudLoginRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud mqtt period
    * Minimum period between 2 Mqtt smartphone sendings in ms : 0 &#x3D; no
    * LWM2M path: /1024//33
    * @return UInt32 api call
    */
    public func getCloudMqttPeriodRequest()
         -> ApiRequest<Void>{
        var path = "/1024//33"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud mqtt period
        * Minimum period between 2 Mqtt smartphone sendings in ms : 0 &#x3D; no
        * LWM2M path: /1024//33
                * @return UInt32 api call
        */
        public func getCloudMqttPeriod()
             throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.getCloudMqttPeriodRequest()
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get cloud password
    * 
    * LWM2M path: /1024//29
    * @return String api call
    */
    public func getCloudPasswordRequest()
         -> ApiRequest<Void>{
        var path = "/1024//29"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get cloud password
        * 
        * LWM2M path: /1024//29
                * @return String api call
        */
        public func getCloudPassword()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCloudPasswordRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get the cloud service name
    * 
    * LWM2M path: /1024//61
    * @return String api call
    */
    public func getCloudServiceNameRequest()
         -> ApiRequest<Void>{
        var path = "/1024//61"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get the cloud service name
        * 
        * LWM2M path: /1024//61
                * @return String api call
        */
        public func getCloudServiceName()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCloudServiceNameRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Crypted communication channel
    * 
    * LWM2M path: /1024//71
    * Body converter id: "Bytes"

    * @param data input
    * @return Bytes api call
    */
    public func getComRequest(
        data: Bytes? = nil
    ) -> ApiRequest<Bytes>{
        var path = "/1024//71"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            , body: data
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Crypted communication channel
        * 
        * LWM2M path: /1024//71
        * Body converter id: "Bytes"
    
        * @param data input
        * @return Bytes api call
        */
        public func getCom(
            data: Bytes? = nil
        ) throws -> ApiResponse<Bytes>{
            let request : ApiRequest<Bytes> = self.getComRequest(data: data)
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get config format firmware version
    * Version du Firmware qui a écrit la conf. (écrit automatiquement lors de la conf par le Firmware, pas depuis le fichier de conf)
    * LWM2M path: /1024//18
    * @return String api call
    */
    public func getConfigFormatFirmwareVersionRequest()
         -> ApiRequest<Void>{
        var path = "/1024//18"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get config format firmware version
        * Version du Firmware qui a écrit la conf. (écrit automatiquement lors de la conf par le Firmware, pas depuis le fichier de conf)
        * LWM2M path: /1024//18
                * @return String api call
        */
        public func getConfigFormatFirmwareVersion()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getConfigFormatFirmwareVersionRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_version")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get config format version
    * 
    * LWM2M path: /1024//8
    * @return String api call
    */
    public func getConfigFormatVersionRequest()
         -> ApiRequest<Void>{
        var path = "/1024//8"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get config format version
        * 
        * LWM2M path: /1024//8
                * @return String api call
        */
        public func getConfigFormatVersion()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getConfigFormatVersionRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_version")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get config version
    * 
    * LWM2M path: /1024//10
    * @return String api call
    */
    public func getConfigVersionRequest()
         -> ApiRequest<Void>{
        var path = "/1024//10"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get config version
        * 
        * LWM2M path: /1024//10
                * @return String api call
        */
        public func getConfigVersion()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getConfigVersionRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_version")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get configuration of Secure Element
    * 
    * LWM2M path: /1024//70
    * @return Bytes api call
    */
    public func getConfigureRequest()
         -> ApiRequest<Void>{
        var path = "/1024//70"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get configuration of Secure Element
        * 
        * LWM2M path: /1024//70
                * @return Bytes api call
        */
        public func getConfigure()
             throws -> ApiResponse<Bytes>{
            let request : ApiRequest<Void> = self.getConfigureRequest()
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get current group id 
    * 
    * LWM2M path: /1024//7
    * @return UInt16 api call
    */
    public func getCurrentGroupIdRequest()
         -> ApiRequest<Void>{
        var path = "/1024//7"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get current group id 
        * 
        * LWM2M path: /1024//7
                * @return UInt16 api call
        */
        public func getCurrentGroupId()
             throws -> ApiResponse<UInt16>{
            let request : ApiRequest<Void> = self.getCurrentGroupIdRequest()
            let converter: TapConverterContainer<UInt16> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<UInt16> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get current host protocol
    * 
    * LWM2M path: /1024//3
    * @return HostProtocol api call
    */
    public func getCurrentHostProtocolRequest()
         -> ApiRequest<Void>{
        var path = "/1024//3"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get current host protocol
        * 
        * LWM2M path: /1024//3
                * @return HostProtocol api call
        */
        public func getCurrentHostProtocol()
             throws -> ApiResponse<HostProtocol>{
            let request : ApiRequest<Void> = self.getCurrentHostProtocolRequest()
            let converter: TapConverterContainer<HostProtocol> = self.converterProvider.get(id: "HostProtocol")
            let response: ApiResponse<HostProtocol> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get current profile id
    * 
    * LWM2M path: /1024//2
    * @return UInt16 api call
    */
    public func getCurrentProfileIdRequest()
         -> ApiRequest<Void>{
        var path = "/1024//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get current profile id
        * 
        * LWM2M path: /1024//2
                * @return UInt16 api call
        */
        public func getCurrentProfileId()
             throws -> ApiResponse<UInt16>{
            let request : ApiRequest<Void> = self.getCurrentProfileIdRequest()
            let converter: TapConverterContainer<UInt16> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<UInt16> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get functions
    * Get functions
    * LWM2M path: /1024//20
    * @return AvailableFunction api call
    */
    public func getFunctionsRequest()
         -> ApiRequest<Void>{
        var path = "/1024//20"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get functions
        * Get functions
        * LWM2M path: /1024//20
                * @return AvailableFunction api call
        */
        public func getFunctions()
             throws -> ApiResponse<AvailableFunction>{
            let request : ApiRequest<Void> = self.getFunctionsRequest()
            let converter: TapConverterContainer<AvailableFunction> = self.converterProvider.get(id: "AvailableFunction")
            let response: ApiResponse<AvailableFunction> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get host inactivity period
    * Host inactivity period before switch to standby mode or shutdown depending on optimisation level (res /1024//14)
    * LWM2M path: /1024//34
    * @return UInt16 api call
    */
    public func getHostInactivityPeriodRequest()
         -> ApiRequest<Void>{
        var path = "/1024//34"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get host inactivity period
        * Host inactivity period before switch to standby mode or shutdown depending on optimisation level (res /1024//14)
        * LWM2M path: /1024//34
                * @return UInt16 api call
        */
        public func getHostInactivityPeriod()
             throws -> ApiResponse<UInt16>{
            let request : ApiRequest<Void> = self.getHostInactivityPeriodRequest()
            let converter: TapConverterContainer<UInt16> = self.converterProvider.get(id: "integer_uint16")
            let response: ApiResponse<UInt16> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get lock infos 
    * 
    * LWM2M path: /1024//6
    * @return InterfaceLock api call
    */
    public func getLockRequest()
         -> ApiRequest<Void>{
        var path = "/1024//6"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get lock infos 
        * 
        * LWM2M path: /1024//6
                * @return InterfaceLock api call
        */
        public func getLock()
             throws -> ApiResponse<InterfaceLock>{
            let request : ApiRequest<Void> = self.getLockRequest()
            let converter: TapConverterContainer<InterfaceLock> = self.converterProvider.get(id: "InterfaceLock")
            let response: ApiResponse<InterfaceLock> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get mqtt relay client id
    * 
    * LWM2M path: /3//2
    * @return String api call
    */
    public func getMqttRelayClientIdRequest()
         -> ApiRequest<Void>{
        var path = "/3//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get mqtt relay client id
        * 
        * LWM2M path: /3//2
                * @return String api call
        */
        public func getMqttRelayClientId()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayClientIdRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get mqtt relay login
    * 
    * LWM2M path: /3//2
    * @return String api call
    */
    public func getMqttRelayLoginRequest()
         -> ApiRequest<Void>{
        var path = "/3//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get mqtt relay login
        * 
        * LWM2M path: /3//2
                * @return String api call
        */
        public func getMqttRelayLogin()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayLoginRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get the mqtt net key for the server
    * 
    * LWM2M path: /1024//55
    * @return String api call
    */
    public func getMqttRelayNetKeyRequest()
         -> ApiRequest<Void>{
        var path = "/1024//55"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get the mqtt net key for the server
        * 
        * LWM2M path: /1024//55
                * @return String api call
        */
        public func getMqttRelayNetKey()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayNetKeyRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get the mqtt relay password
    * Mot de passe connexion au broker
    * LWM2M path: /1024//54
    * @return String api call
    */
    public func getMqttRelayPasswordRequest()
         -> ApiRequest<Void>{
        var path = "/1024//54"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get the mqtt relay password
        * Mot de passe connexion au broker
        * LWM2M path: /1024//54
                * @return String api call
        */
        public func getMqttRelayPassword()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayPasswordRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get port of the mqtt broker
    * 
    * LWM2M path: /1024//51
    * @return String api call
    */
    public func getMqttRelayPortRequest()
         -> ApiRequest<Void>{
        var path = "/1024//51"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get port of the mqtt broker
        * 
        * LWM2M path: /1024//51
                * @return String api call
        */
        public func getMqttRelayPort()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayPortRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get mqtt relay url
    * 
    * LWM2M path: /1024//50
    * @return String api call
    */
    public func getMqttRelayUrlRequest()
         -> ApiRequest<Void>{
        var path = "/1024//50"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get mqtt relay url
        * 
        * LWM2M path: /1024//50
                * @return String api call
        */
        public func getMqttRelayUrl()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getMqttRelayUrlRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get iotize gateway ip on the network
    * Adresse IP : ex 192.168.1.1. Seulement pour les IoTize Wifi. (vraiment ?)
    * LWM2M path: /1024//31
    * @return String api call
    */
    public func getNetworkGatewayIpRequest()
         -> ApiRequest<Void>{
        var path = "/1024//31"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get iotize gateway ip on the network
        * Adresse IP : ex 192.168.1.1. Seulement pour les IoTize Wifi. (vraiment ?)
        * LWM2M path: /1024//31
                * @return String api call
        */
        public func getNetworkGatewayIp()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getNetworkGatewayIpRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_ipv4")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get IoTize device ip on the network
    * Adresse statique IP : ex 192.168.1.10. DHCP si adresse &#x3D; 0.0.0.0. Seulement pour les IoTize Wifi.
    * LWM2M path: /1024//30
    * @return String api call
    */
    public func getNetworkInfraIpRequest()
         -> ApiRequest<Void>{
        var path = "/1024//30"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get IoTize device ip on the network
        * Adresse statique IP : ex 192.168.1.10. DHCP si adresse &#x3D; 0.0.0.0. Seulement pour les IoTize Wifi.
        * LWM2M path: /1024//30
                * @return String api call
        */
        public func getNetworkInfraIp()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getNetworkInfraIpRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_ipv4")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get infrastructure ip mask
    * Mask IP : ex 255.255.255.0. Seulement pour les IoTize Wifi.
    * LWM2M path: /1024//32
    * @return String api call
    */
    public func getNetworkInfraIpMaskRequest()
         -> ApiRequest<Void>{
        var path = "/1024//32"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get infrastructure ip mask
        * Mask IP : ex 255.255.255.0. Seulement pour les IoTize Wifi.
        * LWM2M path: /1024//32
                * @return String api call
        */
        public func getNetworkInfraIpMask()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getNetworkInfraIpMaskRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string_ipv4mask")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get network mode
    * 
    * LWM2M path: /1024//15
    * @return NetworkMode api call
    */
    public func getNetworkModeRequest()
         -> ApiRequest<Void>{
        var path = "/1024//15"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get network mode
        * 
        * LWM2M path: /1024//15
                * @return NetworkMode api call
        */
        public func getNetworkMode()
             throws -> ApiResponse<NetworkMode>{
            let request : ApiRequest<Void> = self.getNetworkModeRequest()
            let converter: TapConverterContainer<NetworkMode> = self.converterProvider.get(id: "NetworkMode")
            let response: ApiResponse<NetworkMode> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Check if nfc paring is mandatory
    * 
    * LWM2M path: /1024//13
    * @return NfcPairingMode api call
    */
    public func getNfcPairingModeRequest()
         -> ApiRequest<Void>{
        var path = "/1024//13"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Check if nfc paring is mandatory
        * 
        * LWM2M path: /1024//13
                * @return NfcPairingMode api call
        */
        public func getNfcPairingMode()
             throws -> ApiResponse<NfcPairingMode>{
            let request : ApiRequest<Void> = self.getNfcPairingModeRequest()
            let converter: TapConverterContainer<NfcPairingMode> = self.converterProvider.get(id: "NfcPairingMode")
            let response: ApiResponse<NfcPairingMode> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get power optimization level
    * 
    * LWM2M path: /1024//14
    * @return LowPowerOptimisationLevel api call
    */
    public func getPowerOptimisationLevelRequest()
         -> ApiRequest<Void>{
        var path = "/1024//14"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get power optimization level
        * 
        * LWM2M path: /1024//14
                * @return LowPowerOptimisationLevel api call
        */
        public func getPowerOptimisationLevel()
             throws -> ApiResponse<LowPowerOptimisationLevel>{
            let request : ApiRequest<Void> = self.getPowerOptimisationLevelRequest()
            let converter: TapConverterContainer<LowPowerOptimisationLevel> = self.converterProvider.get(id: "LowPowerOptimisationLevel")
            let response: ApiResponse<LowPowerOptimisationLevel> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get the public password ?
    * Password utilisé pour l&#39;enregistrement. Également défaut du MQTT Relay PWD
    * LWM2M path: /1024//60
    * @return String api call
    */
    public func getPublicPasswordRequest()
         -> ApiRequest<Void>{
        var path = "/1024//60"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get the public password ?
        * Password utilisé pour l&#39;enregistrement. Également défaut du MQTT Relay PWD
        * LWM2M path: /1024//60
                * @return String api call
        */
        public func getPublicPassword()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getPublicPasswordRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Generate a random number
    * 
    * LWM2M path: /1024//49
    * @return Bytes api call
    */
    public func getRandRequest()
         -> ApiRequest<Void>{
        var path = "/1024//49"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Generate a random number
        * 
        * LWM2M path: /1024//49
                * @return Bytes api call
        */
        public func getRand()
             throws -> ApiResponse<Bytes>{
            let request : ApiRequest<Void> = self.getRandRequest()
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get network key
    * Clé WAP / WEP pour connection réseau infrastructure &amp; P2P
    * LWM2M path: /1024//16
    * @return String api call
    */
    public func getWepKeyRequest()
         -> ApiRequest<Void>{
        var path = "/1024//16"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get network key
        * Clé WAP / WEP pour connection réseau infrastructure &amp; P2P
        * LWM2M path: /1024//16
                * @return String api call
        */
        public func getWepKey()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getWepKeyRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get wifi hostname
    * Hostname par exemple, à lire par NFC pour connection socket à un IoTize Wifi en mode infrastructure avec DHCP
    * LWM2M path: /1024//35
    * @return String api call
    */
    public func getWifiHostnameRequest()
         -> ApiRequest<Void>{
        var path = "/1024//35"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get wifi hostname
        * Hostname par exemple, à lire par NFC pour connection socket à un IoTize Wifi en mode infrastructure avec DHCP
        * LWM2M path: /1024//35
                * @return String api call
        */
        public func getWifiHostname()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getWifiHostnameRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get wifi ssid
    * May be null if not connected to any network
    * LWM2M path: /1024//25
    * @return String api call
    */
    public func getWifiSSIDRequest()
         -> ApiRequest<Void>{
        var path = "/1024//25"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get wifi ssid
        * May be null if not connected to any network
        * LWM2M path: /1024//25
                * @return String api call
        */
        public func getWifiSSID()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getWifiSSIDRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Keep alive.
    * Call this method to ensure communication resources are maintain.
    * LWM2M path: /1024//4
    * @return UInt32 api call
    */
    public func keepAliveRequest()
         -> ApiRequest<Void>{
        var path = "/1024//4"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Keep alive.
        * Call this method to ensure communication resources are maintain.
        * LWM2M path: /1024//4
                * @return UInt32 api call
        */
        public func keepAlive()
             throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.keepAliveRequest()
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Login
    * User login with username and password
    * LWM2M path: /1024//0
    * Body converter id: "LoginCredential"

    * @param credential input
    * @return  api call
    */
    public func loginRequest(
        credential: LoginCredential? = nil
    ) -> ApiRequest<LoginCredential>{
        var path = "/1024//0"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
            , body: credential
            , bodyEncoder: self.converterProvider.get(id: "LoginCredential")
        )
    }

     /**
        * Login
        * User login with username and password
        * LWM2M path: /1024//0
        * Body converter id: "LoginCredential"
    
        * @param credential input
        * @return  api call
        */
        public func login(
            credential: LoginCredential? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<LoginCredential> = self.loginRequest(credential: credential)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Login
    * User login with username and password hash
    * LWM2M path: /1024//0
    * Body converter id: "LoginCredentialHashed"

    * @param credential input
    * @return  api call
    */
    public func loginWithHashRequest(
        credential: LoginCredentialHashed? = nil
    ) -> ApiRequest<LoginCredentialHashed>{
        var path = "/1024//0"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
            , body: credential
            , bodyEncoder: self.converterProvider.get(id: "LoginCredentialHashed")
        )
    }

     /**
        * Login
        * User login with username and password hash
        * LWM2M path: /1024//0
        * Body converter id: "LoginCredentialHashed"
    
        * @param credential input
        * @return  api call
        */
        public func loginWithHash(
            credential: LoginCredentialHashed? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<LoginCredentialHashed> = self.loginWithHashRequest(credential: credential)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Logout
    * 
    * LWM2M path: /1024//1
    * @return  api call
    */
    public func logoutRequest()
         -> ApiRequest<Void>{
        var path = "/1024//1"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Logout
        * 
        * LWM2M path: /1024//1
                * @return  api call
        */
        public func logout()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.logoutRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Execute multiple commands sent in one frame, and return all answers in one
    * 
    * LWM2M path: /1024//89
    * Body converter id: "TapMultiRequest"

    * @param data input
    * @return TapMultiResponse api call
    */
    public func multiCommandsRequest(
        data: TapMultiRequest? = nil
    ) -> ApiRequest<TapMultiRequest>{
        var path = "/1024//89"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            , body: data
            , bodyEncoder: self.converterProvider.get(id: "TapMultiRequest")
        )
    }

     /**
        * Execute multiple commands sent in one frame, and return all answers in one
        * 
        * LWM2M path: /1024//89
        * Body converter id: "TapMultiRequest"
    
        * @param data input
        * @return TapMultiResponse api call
        */
        public func multiCommands(
            data: TapMultiRequest? = nil
        ) throws -> ApiResponse<TapMultiResponse>{
            let request : ApiRequest<TapMultiRequest> = self.multiCommandsRequest(data: data)
            let converter: TapConverterContainer<TapMultiResponse> = self.converterProvider.get(id: "TapMultiResponse")
            let response: ApiResponse<TapMultiResponse> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Admnistration login
    * Log in as an administrator thanks to the UID
    * LWM2M path: /1024//5
    * Body converter id: "Bytes"

    * @param uid input
    * @return  api call
    */
    public func postLoginUidRequest(
        uid: Bytes
    ) -> ApiRequest<Bytes>{
        var path = "/1024//5"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
            , body: uid
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Admnistration login
        * Log in as an administrator thanks to the UID
        * LWM2M path: /1024//5
        * Body converter id: "Bytes"
    
        * @param uid input
        * @return  api call
        */
        public func postLoginUid(
            uid: Bytes
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Bytes> = self.postLoginUidRequest(uid: uid)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set application name
    * 
    * LWM2M path: /1024//9
    * Body converter id: "string"

    * @param appName input
    * @return  api call
    */
    public func putAppNameRequest(
        appName: String
    ) -> ApiRequest<String>{
        var path = "/1024//9"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: appName
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Set application name
        * 
        * LWM2M path: /1024//9
        * Body converter id: "string"
    
        * @param appName input
        * @return  api call
        */
        public func putAppName(
            appName: String
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putAppNameRequest(appName: appName)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set app path
    * 
    * LWM2M path: /1024//11
    * Body converter id: "string"

    * @param version input
    * @return  api call
    */
    public func putAppPathRequest(
        version: String
    ) -> ApiRequest<String>{
        var path = "/1024//11"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: version
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Set app path
        * 
        * LWM2M path: /1024//11
        * Body converter id: "string"
    
        * @param version input
        * @return  api call
        */
        public func putAppPath(
            version: String
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putAppPathRequest(version: version)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write authorized host protocols
    * 
    * LWM2M path: /1024//17
    * Body converter id: "ListHostProtocol"

    * @param mode input
    * @return  api call
    */
    public func putAuthorizedHostProtocolRequest(
        mode: ListHostProtocol? = nil
    ) -> ApiRequest<ListHostProtocol>{
        var path = "/1024//17"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: mode
            , bodyEncoder: self.converterProvider.get(id: "ListHostProtocol")
        )
    }

     /**
        * Write authorized host protocols
        * 
        * LWM2M path: /1024//17
        * Body converter id: "ListHostProtocol"
    
        * @param mode input
        * @return  api call
        */
        public func putAuthorizedHostProtocol(
            mode: ListHostProtocol? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<ListHostProtocol> = self.putAuthorizedHostProtocolRequest(mode: mode)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write cloud connection mode
    * 
    * LWM2M path: /1024//26
    * Body converter id: "CloudConnectionMode"

    * @param key input
    * @return  api call
    */
    public func putCloudConnectionModeRequest(
        key: CloudConnectionMode? = nil
    ) -> ApiRequest<CloudConnectionMode>{
        var path = "/1024//26"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "CloudConnectionMode")
        )
    }

     /**
        * Write cloud connection mode
        * 
        * LWM2M path: /1024//26
        * Body converter id: "CloudConnectionMode"
    
        * @param key input
        * @return  api call
        */
        public func putCloudConnectionMode(
            key: CloudConnectionMode? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<CloudConnectionMode> = self.putCloudConnectionModeRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write cloud gateway url
    * 
    * LWM2M path: /1024//12
    * Body converter id: "string"

    * @param version input
    * @return  api call
    */
    public func putCloudGatewayUrlRequest(
        version: String
    ) -> ApiRequest<String>{
        var path = "/1024//12"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: version
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write cloud gateway url
        * 
        * LWM2M path: /1024//12
        * Body converter id: "string"
    
        * @param version input
        * @return  api call
        */
        public func putCloudGatewayUrl(
            version: String
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putCloudGatewayUrlRequest(version: version)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write cloud mqtt period
    * 
    * LWM2M path: /1024//33
    * Body converter id: "integer_uint32"

    * @param key input
    * @return  api call
    */
    public func putCloudMqttPeriodRequest(
        key: UInt32? = nil
    ) -> ApiRequest<UInt32>{
        var path = "/1024//33"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Write cloud mqtt period
        * 
        * LWM2M path: /1024//33
        * Body converter id: "integer_uint32"
    
        * @param key input
        * @return  api call
        */
        public func putCloudMqttPeriod(
            key: UInt32? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<UInt32> = self.putCloudMqttPeriodRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write cloud password
    * 
    * LWM2M path: /1024//29
    * Body converter id: "string"

    * @param key input
    * @return  api call
    */
    public func putCloudPasswordRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//29"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write cloud password
        * 
        * LWM2M path: /1024//29
        * Body converter id: "string"
    
        * @param key input
        * @return  api call
        */
        public func putCloudPassword(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putCloudPasswordRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write cloud service name
    * 
    * LWM2M path: /1024//61
    * Body converter id: "string"

    * @param name input
    * @return  api call
    */
    public func putCloudServiceNameRequest(
        name: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//61"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: name
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write cloud service name
        * 
        * LWM2M path: /1024//61
        * Body converter id: "string"
    
        * @param name input
        * @return  api call
        */
        public func putCloudServiceName(
            name: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putCloudServiceNameRequest(name: name)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set config format version
    * 
    * LWM2M path: /1024//8
    * Body converter id: "integer_uint32"

    * @param configFormat input
    * @return  api call
    */
    public func putConfigFormatVersionRequest(
        configFormat: UInt32
    ) -> ApiRequest<UInt32>{
        var path = "/1024//8"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: configFormat
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Set config format version
        * 
        * LWM2M path: /1024//8
        * Body converter id: "integer_uint32"
    
        * @param configFormat input
        * @return  api call
        */
        public func putConfigFormatVersion(
            configFormat: UInt32
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<UInt32> = self.putConfigFormatVersionRequest(configFormat: configFormat)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set config version
    * 
    * LWM2M path: /1024//10
    * Body converter id: "integer_uint32"

    * @param version input
    * @return  api call
    */
    public func putConfigVersionRequest(
        version: UInt32
    ) -> ApiRequest<UInt32>{
        var path = "/1024//10"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: version
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Set config version
        * 
        * LWM2M path: /1024//10
        * Body converter id: "integer_uint32"
    
        * @param version input
        * @return  api call
        */
        public func putConfigVersion(
            version: UInt32
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<UInt32> = self.putConfigVersionRequest(version: version)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write secure element configuration
    * 
    * LWM2M path: /1024//70
    * Body converter id: "Bytes"

    * @param conf input
    * @return  api call
    */
    public func putConfigureRequest(
        conf: Bytes? = nil
    ) -> ApiRequest<Bytes>{
        var path = "/1024//70"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: conf
            , bodyEncoder: self.converterProvider.get(id: "Bytes")
        )
    }

     /**
        * Write secure element configuration
        * 
        * LWM2M path: /1024//70
        * Body converter id: "Bytes"
    
        * @param conf input
        * @return  api call
        */
        public func putConfigure(
            conf: Bytes? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Bytes> = self.putConfigureRequest(conf: conf)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write current host protocol
    * 
    * LWM2M path: /1024//3
    * Body converter id: "HostProtocol"

    * @param hostProtocol input
    * @return  api call
    */
    public func putCurrentHostProtocolRequest(
        hostProtocol: HostProtocol
    ) -> ApiRequest<HostProtocol>{
        var path = "/1024//3"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: hostProtocol
            , bodyEncoder: self.converterProvider.get(id: "HostProtocol")
        )
    }

     /**
        * Write current host protocol
        * 
        * LWM2M path: /1024//3
        * Body converter id: "HostProtocol"
    
        * @param hostProtocol input
        * @return  api call
        */
        public func putCurrentHostProtocol(
            hostProtocol: HostProtocol
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<HostProtocol> = self.putCurrentHostProtocolRequest(hostProtocol: hostProtocol)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write host inactivity period
    * 
    * LWM2M path: /1024//34
    * Body converter id: "integer_uint16"

    * @param key input
    * @return  api call
    */
    public func putHostInactivityPeriodRequest(
        key: UInt16? = nil
    ) -> ApiRequest<UInt16>{
        var path = "/1024//34"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "integer_uint16")
        )
    }

     /**
        * Write host inactivity period
        * 
        * LWM2M path: /1024//34
        * Body converter id: "integer_uint16"
    
        * @param key input
        * @return  api call
        */
        public func putHostInactivityPeriod(
            key: UInt16? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<UInt16> = self.putHostInactivityPeriodRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set lock infos 
    * 
    * LWM2M path: /1024//6
    * Body converter id: "InterfaceLock"

    * @param infos input
    * @return  api call
    */
    public func putLockRequest(
        infos: InterfaceLock
    ) -> ApiRequest<InterfaceLock>{
        var path = "/1024//6"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: infos
            , bodyEncoder: self.converterProvider.get(id: "InterfaceLock")
        )
    }

     /**
        * Set lock infos 
        * 
        * LWM2M path: /1024//6
        * Body converter id: "InterfaceLock"
    
        * @param infos input
        * @return  api call
        */
        public func putLock(
            infos: InterfaceLock
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<InterfaceLock> = self.putLockRequest(infos: infos)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write mqtt net key
    * 
    * LWM2M path: /1024//55
    * Body converter id: "string"

    * @param netkey input
    * @return  api call
    */
    public func putMqttRelayNetKeyRequest(
        netkey: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//55"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: netkey
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write mqtt net key
        * 
        * LWM2M path: /1024//55
        * Body converter id: "string"
    
        * @param netkey input
        * @return  api call
        */
        public func putMqttRelayNetKey(
            netkey: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putMqttRelayNetKeyRequest(netkey: netkey)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write mqtt relay password
    * 
    * LWM2M path: /1024//54
    * Body converter id: "string"

    * @param url input
    * @return  api call
    */
    public func putMqttRelayPasswordRequest(
        url: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//54"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: url
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write mqtt relay password
        * 
        * LWM2M path: /1024//54
        * Body converter id: "string"
    
        * @param url input
        * @return  api call
        */
        public func putMqttRelayPassword(
            url: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putMqttRelayPasswordRequest(url: url)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write service name of the mqtt broker
    * 
    * LWM2M path: /1024//51
    * Body converter id: "string"

    * @param url input
    * @return  api call
    */
    public func putMqttRelayPortRequest(
        url: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//51"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: url
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write service name of the mqtt broker
        * 
        * LWM2M path: /1024//51
        * Body converter id: "string"
    
        * @param url input
        * @return  api call
        */
        public func putMqttRelayPort(
            url: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putMqttRelayPortRequest(url: url)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write mqtt relay url
    * 
    * LWM2M path: /1024//50
    * Body converter id: "string"

    * @param url input
    * @return  api call
    */
    public func putMqttRelayUrlRequest(
        url: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//50"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: url
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write mqtt relay url
        * 
        * LWM2M path: /1024//50
        * Body converter id: "string"
    
        * @param url input
        * @return  api call
        */
        public func putMqttRelayUrl(
            url: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putMqttRelayUrlRequest(url: url)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write iotize gateway ip
    * 
    * LWM2M path: /1024//31
    * Body converter id: "string_ipv4"

    * @param key input
    * @return  api call
    */
    public func putNetworkGatewayIpRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//31"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string_ipv4")
        )
    }

     /**
        * Write iotize gateway ip
        * 
        * LWM2M path: /1024//31
        * Body converter id: "string_ipv4"
    
        * @param key input
        * @return  api call
        */
        public func putNetworkGatewayIp(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putNetworkGatewayIpRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write infrastructure ip
    * 
    * LWM2M path: /1024//30
    * Body converter id: "string_ipv4"

    * @param key input
    * @return  api call
    */
    public func putNetworkInfraIpRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//30"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string_ipv4")
        )
    }

     /**
        * Write infrastructure ip
        * 
        * LWM2M path: /1024//30
        * Body converter id: "string_ipv4"
    
        * @param key input
        * @return  api call
        */
        public func putNetworkInfraIp(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putNetworkInfraIpRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write infrastructure ip mask
    * 
    * LWM2M path: /1024//32
    * Body converter id: "string_ipv4mask"

    * @param key input
    * @return  api call
    */
    public func putNetworkInfraIpMaskRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//32"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string_ipv4mask")
        )
    }

     /**
        * Write infrastructure ip mask
        * 
        * LWM2M path: /1024//32
        * Body converter id: "string_ipv4mask"
    
        * @param key input
        * @return  api call
        */
        public func putNetworkInfraIpMask(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putNetworkInfraIpMaskRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write network mode
    * 
    * LWM2M path: /1024//15
    * Body converter id: "NetworkMode"

    * @param mode input
    * @return  api call
    */
    public func putNetworkModeRequest(
        mode: NetworkMode? = nil
    ) -> ApiRequest<NetworkMode>{
        var path = "/1024//15"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: mode
            , bodyEncoder: self.converterProvider.get(id: "NetworkMode")
        )
    }

     /**
        * Write network mode
        * 
        * LWM2M path: /1024//15
        * Body converter id: "NetworkMode"
    
        * @param mode input
        * @return  api call
        */
        public func putNetworkMode(
            mode: NetworkMode? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<NetworkMode> = self.putNetworkModeRequest(mode: mode)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Change wether if nfc pairing is mandatory
    * 
    * LWM2M path: /1024//13
    * Body converter id: "NfcPairingMode"

    * @param mode input
    * @return  api call
    */
    public func putNfcPairingModeRequest(
        mode: NfcPairingMode? = nil
    ) -> ApiRequest<NfcPairingMode>{
        var path = "/1024//13"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: mode
            , bodyEncoder: self.converterProvider.get(id: "NfcPairingMode")
        )
    }

     /**
        * Change wether if nfc pairing is mandatory
        * 
        * LWM2M path: /1024//13
        * Body converter id: "NfcPairingMode"
    
        * @param mode input
        * @return  api call
        */
        public func putNfcPairingMode(
            mode: NfcPairingMode? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<NfcPairingMode> = self.putNfcPairingModeRequest(mode: mode)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write power optimization level
    * 
    * LWM2M path: /1024//14
    * Body converter id: "LowPowerOptimisationLevel"

    * @param mode input
    * @return  api call
    */
    public func putPowerOptimisationLevelRequest(
        mode: LowPowerOptimisationLevel? = nil
    ) -> ApiRequest<LowPowerOptimisationLevel>{
        var path = "/1024//14"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: mode
            , bodyEncoder: self.converterProvider.get(id: "LowPowerOptimisationLevel")
        )
    }

     /**
        * Write power optimization level
        * 
        * LWM2M path: /1024//14
        * Body converter id: "LowPowerOptimisationLevel"
    
        * @param mode input
        * @return  api call
        */
        public func putPowerOptimisationLevel(
            mode: LowPowerOptimisationLevel? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<LowPowerOptimisationLevel> = self.putPowerOptimisationLevelRequest(mode: mode)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write network key
    * 
    * LWM2M path: /1024//16
    * Body converter id: "string"

    * @param key input
    * @return  api call
    */
    public func putWepKeyRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//16"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write network key
        * 
        * LWM2M path: /1024//16
        * Body converter id: "string"
    
        * @param key input
        * @return  api call
        */
        public func putWepKey(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putWepKeyRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write wifi ssid
    * 
    * LWM2M path: /1024//25
    * Body converter id: "string"

    * @param key input
    * @return  api call
    */
    public func putWifiSsidRequest(
        key: String? = nil
    ) -> ApiRequest<String>{
        var path = "/1024//25"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            , body: key
            , bodyEncoder: self.converterProvider.get(id: "string")
        )
    }

     /**
        * Write wifi ssid
        * 
        * LWM2M path: /1024//25
        * Body converter id: "string"
    
        * @param key input
        * @return  api call
        */
        public func putWifiSsid(
            key: String? = nil
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<String> = self.putWifiSsidRequest(key: key)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Apply the new configuration on the device
    * 
    * LWM2M path: /1024//10
    * @return  api call
    */
    public func reloadConfigRequest()
         -> ApiRequest<Void>{
        var path = "/1024//10"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Apply the new configuration on the device
        * 
        * LWM2M path: /1024//10
                * @return  api call
        */
        public func reloadConfig()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.reloadConfigRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

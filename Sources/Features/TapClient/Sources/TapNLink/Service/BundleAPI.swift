//
// BundleAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class BundleAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Get acls
    * 
    * LWM2M path: /1028/{tupId}

    * @param bundleId input

    * @param groupId input
    * @return  api call
    */
    public func getAclgroupIdRequest(
        bundleId: UInt8, groupId: UInt8
    ) -> ApiRequest<Void>{
        var path = "/1028/{tupId}"
        
        path = path.replacingOccurrences(of: "{"+"bundleId"+"}", with: String(bundleId))
        
        path = path.replacingOccurrences(of: "{"+"groupId"+"}", with: String(groupId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
            
        )
    }

     /**
        * Get acls
        * 
        * LWM2M path: /1028/{tupId}
        
        * @param bundleId input

        * @param groupId input
        * @return  api call
        */
        public func getAclgroupId(
            bundleId: UInt8, groupId: UInt8
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.getAclgroupIdRequest(bundleId: bundleId, groupId: groupId)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Get datalog period
    * 
    * LWM2M path: /1028/{bundleId}/2

    * @param bundleId input
    * @return UInt32 api call
    */
    public func getDatalogPeriodRequest(
        bundleId: UInt8
    ) -> ApiRequest<Void>{
        var path = "/1028/{bundleId}/2"
        
        path = path.replacingOccurrences(of: "{"+"bundleId"+"}", with: String(bundleId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get datalog period
        * 
        * LWM2M path: /1028/{bundleId}/2
        
        * @param bundleId input
        * @return UInt32 api call
        */
        public func getDatalogPeriod(
            bundleId: UInt8
        ) throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.getDatalogPeriodRequest(bundleId: bundleId)
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get bundle values
    * 
    * LWM2M path: /1028/{bundleId}/1

    * @param bundleId input
    * @return Bytes api call
    */
    public func getValuesRequest(
        bundleId: UInt8
    ) -> ApiRequest<Void>{
        var path = "/1028/{bundleId}/1"
        
        path = path.replacingOccurrences(of: "{"+"bundleId"+"}", with: String(bundleId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
            
        )
    }

     /**
        * Get bundle values
        * 
        * LWM2M path: /1028/{bundleId}/1
        
        * @param bundleId input
        * @return Bytes api call
        */
        public func getValues(
            bundleId: UInt8
        ) throws -> ApiResponse<Bytes>{
            let request : ApiRequest<Void> = self.getValuesRequest(bundleId: bundleId)
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Write acls
    * 
    * LWM2M path: /1028/{bundleId}/0/{groupId}
    * Body converter id: "ReadWriteRights"

    * @param bundleId input

    * @param groupId input

    * @param rights input
    * @return  api call
    */
    public func putAclgroupIdRequest(
        bundleId: UInt8, groupId: UInt8, rights: ReadWriteRights
    ) -> ApiRequest<ReadWriteRights>{
        var path = "/1028/{bundleId}/0/{groupId}"
        
        path = path.replacingOccurrences(of: "{"+"bundleId"+"}", with: String(bundleId))
        
        path = path.replacingOccurrences(of: "{"+"groupId"+"}", with: String(groupId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            
            , body: rights
            , bodyEncoder: self.converterProvider.get(id: "ReadWriteRights")
        )
    }

     /**
        * Write acls
        * 
        * LWM2M path: /1028/{bundleId}/0/{groupId}
        * Body converter id: "ReadWriteRights"
    
        * @param bundleId input

        * @param groupId input

        * @param rights input
        * @return  api call
        */
        public func putAclgroupId(
            bundleId: UInt8, groupId: UInt8, rights: ReadWriteRights
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<ReadWriteRights> = self.putAclgroupIdRequest(bundleId: bundleId, groupId: groupId, rights: rights)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Write datalog period
    * 
    * LWM2M path: /1028/{bundleId}/2
    * Body converter id: "integer_uint32"

    * @param bundleId input

    * @param value input
    * @return  api call
    */
    public func putDatalogPeriodRequest(
        bundleId: UInt8, value: UInt32
    ) -> ApiRequest<UInt32>{
        var path = "/1028/{bundleId}/2"
        
        path = path.replacingOccurrences(of: "{"+"bundleId"+"}", with: String(bundleId))
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
            
            , body: value
            , bodyEncoder: self.converterProvider.get(id: "integer_uint32")
        )
    }

     /**
        * Write datalog period
        * 
        * LWM2M path: /1028/{bundleId}/2
        * Body converter id: "integer_uint32"
    
        * @param bundleId input

        * @param value input
        * @return  api call
        */
        public func putDatalogPeriod(
            bundleId: UInt8, value: UInt32
        ) throws -> ApiResponse<Void>{
            let request : ApiRequest<UInt32> = self.putDatalogPeriodRequest(bundleId: bundleId, value: value)
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

//
// DeviceAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class DeviceAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Factory reset
    * 
    * LWM2M path: /3//5
    * @return  api call
    */
    public func factoryResetRequest()
         -> ApiRequest<Void>{
        let path = "/3//5"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Factory reset
        * 
        * LWM2M path: /3//5
                * @return  api call
        */
        public func factoryReset()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.factoryResetRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Get available power sources
    * 
    * LWM2M path: /3//6
    * @return AvailablePowerSource api call
    */
    public func getAvailablePowerSourceRequest()
         -> ApiRequest<Void>{
        let path = "/3//6"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get available power sources
        * 
        * LWM2M path: /3//6
                * @return AvailablePowerSource api call
        */
        public func getAvailablePowerSource()
             throws -> ApiResponse<AvailablePowerSource>{
            let request : ApiRequest<Void> = self.getAvailablePowerSourceRequest()
            let converter: TapConverterContainer<AvailablePowerSource> = self.converterProvider.get(id: "AvailablePowerSource")
            let response: ApiResponse<AvailablePowerSource> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device current time
    * 
    * LWM2M path: /3//13
    * @return String api call
    */
    public func getCurrentTimeRequest()
         -> ApiRequest<Void>{
        let path = "/3//13"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device current time
        * 
        * LWM2M path: /3//13
                * @return String api call
        */
        public func getCurrentTime()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getCurrentTimeRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device firmware version
    * 
    * LWM2M path: /3//3
    * @return String api call
    */
    public func getFirmwareVersionRequest()
         -> ApiRequest<Void>{
        let path = "/3//3"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device firmware version
        * 
        * LWM2M path: /3//3
                * @return String api call
        */
        public func getFirmwareVersion()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getFirmwareVersionRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device last error code
    * 
    * LWM2M path: /3//11
    * @return UInt32 api call
    */
    public func getLastErrorCodeRequest()
         -> ApiRequest<Void>{
        let path = "/3//11"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device last error code
        * 
        * LWM2M path: /3//11
                * @return UInt32 api call
        */
        public func getLastErrorCode()
             throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.getLastErrorCodeRequest()
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get manufacturer name
    * 
    * LWM2M path: /3//0
    * @return String api call
    */
    public func getManufacturerRequest()
         -> ApiRequest<Void>{
        let path = "/3//0"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get manufacturer name
        * 
        * LWM2M path: /3//0
                * @return String api call
        */
        public func getManufacturer()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getManufacturerRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device memory free
    * In bytes
    * LWM2M path: /3//10
    * @return UInt32 api call
    */
    public func getMemoryFreeRequest()
         -> ApiRequest<Void>{
        let path = "/3//10"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device memory free
        * In bytes
        * LWM2M path: /3//10
                * @return UInt32 api call
        */
        public func getMemoryFree()
             throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.getMemoryFreeRequest()
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device model name
    * 
    * LWM2M path: /3//1
    * @return String api call
    */
    public func getModelNameRequest()
         -> ApiRequest<Void>{
        let path = "/3//1"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device model name
        * 
        * LWM2M path: /3//1
                * @return String api call
        */
        public func getModelName()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getModelNameRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get power source voltage
    * 
    * LWM2M path: /3//7
    * @return UInt32 api call
    */
    public func getPowerSourceVoltageRequest()
         -> ApiRequest<Void>{
        let path = "/3//7"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get power source voltage
        * 
        * LWM2M path: /3//7
                * @return UInt32 api call
        */
        public func getPowerSourceVoltage()
             throws -> ApiResponse<UInt32>{
            let request : ApiRequest<Void> = self.getPowerSourceVoltageRequest()
            let converter: TapConverterContainer<UInt32> = self.converterProvider.get(id: "integer_uint32")
            let response: ApiResponse<UInt32> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get public password
    * Password pour l&#39;enregistrement. Egalement valeur par défaut des password Cloud et MQTTRelay
    * LWM2M path: /3//17
    * @return String api call
    */
    public func getPublicPasswordRequest()
         -> ApiRequest<Void>{
        let path = "/3//17"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get public password
        * Password pour l&#39;enregistrement. Egalement valeur par défaut des password Cloud et MQTTRelay
        * LWM2M path: /3//17
                * @return String api call
        */
        public func getPublicPassword()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getPublicPasswordRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get device serial number
    * 
    * LWM2M path: /3//2
    * @return String api call
    */
    public func getSerialNumberRequest()
         -> ApiRequest<Void>{
        let path = "/3//2"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get device serial number
        * 
        * LWM2M path: /3//2
                * @return String api call
        */
        public func getSerialNumber()
             throws -> ApiResponse<String>{
            let request : ApiRequest<Void> = self.getSerialNumberRequest()
            let converter: TapConverterContainer<String> = self.converterProvider.get(id: "string")
            let response: ApiResponse<String> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * ???
    * 
    * LWM2M path: /3//11
    * @return  api call
    */
    public func postLastErrorCodeRequest()
         -> ApiRequest<Void>{
        let path = "/3//11"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * ???
        * 
        * LWM2M path: /3//11
                * @return  api call
        */
        public func postLastErrorCode()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.postLastErrorCodeRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Set device current time
    * 
    * LWM2M path: /3//13
    * @return  api call
    */
    public func putCurrentTimeRequest()
         -> ApiRequest<Void>{
        let path = "/3//13"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: path
        )
    }

     /**
        * Set device current time
        * 
        * LWM2M path: /3//13
                * @return  api call
        */
        public func putCurrentTime()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.putCurrentTimeRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Reboot device
    * 
    * LWM2M path: /3//4
    * @return  api call
    */
    public func rebootRequest()
         -> ApiRequest<Void>{
        let path = "/3//4"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Reboot device
        * 
        * LWM2M path: /3//4
                * @return  api call
        */
        public func reboot()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.rebootRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Reset device last error code
    * 
    * LWM2M path: /3//12
    * @return  api call
    */
    public func resetLastErrorCodeRequest()
         -> ApiRequest<Void>{
        let path = "/3//12"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Reset device last error code
        * 
        * LWM2M path: /3//12
                * @return  api call
        */
        public func resetLastErrorCode()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.resetLastErrorCodeRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

//
// FirmwareAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
import TapClientApi
// 



open class FirmwareAPI {

    var client: TapClient
    var converterProvider: ConverterProvider

    init(client: TapClient, converterProvider: ConverterProvider){
        self.client = client
        self.converterProvider = converterProvider
    }

    /**
    * Get state
    * 
    * LWM2M path: /5//3
    * @deprecated
    * @return FirmwareState api call
    */
    public func getStateRequest()
         -> ApiRequest<Void>{
        var path = "/5//3"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get state
        * 
        * LWM2M path: /5//3
            * @deprecated
            * @return FirmwareState api call
        */
        public func getState()
             throws -> ApiResponse<FirmwareState>{
            let request : ApiRequest<Void> = self.getStateRequest()
            let converter: TapConverterContainer<FirmwareState> = self.converterProvider.get(id: "FirmwareState")
            let response: ApiResponse<FirmwareState> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Get firmware update result
    * 
    * LWM2M path: /5//5
    * @deprecated
    * @return FirmwareUpdateResult api call
    */
    public func getUpdateResultRequest()
         -> ApiRequest<Void>{
        var path = "/5//5"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: path
        )
    }

     /**
        * Get firmware update result
        * 
        * LWM2M path: /5//5
            * @deprecated
            * @return FirmwareUpdateResult api call
        */
        public func getUpdateResult()
             throws -> ApiResponse<FirmwareUpdateResult>{
            let request : ApiRequest<Void> = self.getUpdateResultRequest()
            let converter: TapConverterContainer<FirmwareUpdateResult> = self.converterProvider.get(id: "FirmwareUpdateResult")
            let response: ApiResponse<FirmwareUpdateResult> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Check CRC
    * Compare le CRC attendu au CRC de la zone référencée. Modifie le Update Result (resource /5//5) à 1 si OK ou 5 si NG.
    * LWM2M path: /5//6
    * Body converter id: "CrcCheckBody"
    * @deprecated

    * @param data input
    * @return Bytes api call
    */
    public func postCrcCheckRequest(
        data: CrcCheckBody
    ) -> ApiRequest<CrcCheckBody>{
        var path = "/5//6"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
            , body: data
            , bodyEncoder: self.converterProvider.get(id: "CrcCheckBody")
        )
    }

     /**
        * Check CRC
        * Compare le CRC attendu au CRC de la zone référencée. Modifie le Update Result (resource /5//5) à 1 si OK ou 5 si NG.
        * LWM2M path: /5//6
        * Body converter id: "CrcCheckBody"
        * @deprecated
    
        * @param data input
        * @return Bytes api call
        */
        public func postCrcCheck(
            data: CrcCheckBody
        ) throws -> ApiResponse<Bytes>{
            let request : ApiRequest<CrcCheckBody> = self.postCrcCheckRequest(data: data)
            let converter: TapConverterContainer<Bytes> = self.converterProvider.get(id: "Bytes")
            let response: ApiResponse<Bytes> = try self.client.execute(request: request, converter: converter)

            return response
        }
    /**
    * Firmware package 
    * Firmware package : actif uniquement en mode update. Permet de transférer les données à programmer en flash pour l&#39;update firmware.
    * LWM2M path: /5//0
    * @deprecated
    * @return  api call
    */
    public func postPackageRequest()
         -> ApiRequest<Void>{
        var path = "/5//0"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Firmware package 
        * Firmware package : actif uniquement en mode update. Permet de transférer les données à programmer en flash pour l&#39;update firmware.
        * LWM2M path: /5//0
            * @deprecated
            * @return  api call
        */
        public func postPackage()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.postPackageRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }
    /**
    * Update
    * Contrôle de l&#39;update: passage en mode update/updater/normal. Param: état futur souhaité. Actif uniquement si loggé en admin. (plus autres contraintes à définir: CRC check fait, etc.) Peut nécessiter un Reset du module
    * LWM2M path: /5//2
    * @deprecated
    * @return  api call
    */
    public func postUpdateRequest()
         -> ApiRequest<Void>{
        var path = "/5//2"
        //var regex = "\{([\S]*)\}"
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: path
        )
    }

     /**
        * Update
        * Contrôle de l&#39;update: passage en mode update/updater/normal. Param: état futur souhaité. Actif uniquement si loggé en admin. (plus autres contraintes à définir: CRC check fait, etc.) Peut nécessiter un Reset du module
        * LWM2M path: /5//2
            * @deprecated
            * @return  api call
        */
        public func postUpdate()
             throws -> ApiResponse<Void>{
            let request : ApiRequest<Void> = self.postUpdateRequest()
            
            let response: ApiResponse<Void> = try self.client.execute(request: request)

            return response
        }

}

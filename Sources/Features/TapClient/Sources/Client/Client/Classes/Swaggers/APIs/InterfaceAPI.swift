//
// InterfaceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class InterfaceAPI {
    /**
     Get application name
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppName(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAppNameWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get application name
     - GET /interface/app-name
     - 
     - examples: [{contentType=application/json, example="Sensor demo"}]

     - returns: RequestBuilder<String> 
     */
    open class func getAppNameWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/app-name"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get app path
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppPath(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAppPathWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get app path
     - GET /interface/app-path
     - Application Android à lancer ou page HTML à afficher quand l'IoTize est détecté par le téléphone
     - examples: [{contentType=application/json, example="$2/user.cloud.iotize.com/examples/Sensor_demo/index.html"}]

     - returns: RequestBuilder<String> 
     */
    open class func getAppPathWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/app-path"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get authorized host protocols
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizedHostProtocol(completion: @escaping ((_ data: ListHostProtocol?,_ error: Error?) -> Void)) {
        getAuthorizedHostProtocolWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get authorized host protocols
     - GET /interface/authorized-host-protocol
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<ListHostProtocol> 
     */
    open class func getAuthorizedHostProtocolWithRequestBuilder() -> RequestBuilder<ListHostProtocol> {
        let path = "/interface/authorized-host-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListHostProtocol>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get available host protocols
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableHostProtocols(completion: @escaping ((_ data: ListHostProtocol?,_ error: Error?) -> Void)) {
        getAvailableHostProtocolsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get available host protocols
     - GET /interface/available-host-protocols
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<ListHostProtocol> 
     */
    open class func getAvailableHostProtocolsWithRequestBuilder() -> RequestBuilder<ListHostProtocol> {
        let path = "/interface/available-host-protocols"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListHostProtocol>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get ble address
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBleAddress(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getBleAddressWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ble address
     - GET /interface/ble/address
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getBleAddressWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/ble/address"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud client id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudClientId(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCloudClientIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud client id
     - GET /interface/cloud/client-id
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCloudClientIdWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/cloud/client-id"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud connection mode
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudConnectionMode(completion: @escaping ((_ data: CloudConnectionMode?,_ error: Error?) -> Void)) {
        getCloudConnectionModeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud connection mode
     - GET /interface/cloud/connection-mode
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<CloudConnectionMode> 
     */
    open class func getCloudConnectionModeWithRequestBuilder() -> RequestBuilder<CloudConnectionMode> {
        let path = "/interface/cloud/connection-mode"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CloudConnectionMode>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud gateway url
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudGatewayUrl(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCloudGatewayUrlWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud gateway url
     - GET /interface/cloud-gateway-url
     - Adresse serveur Web du broker MQTT servant au Cloud. Pour envoyer le datalog par exemple. (Mais PAS pour le Relay MQTT)
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCloudGatewayUrlWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/cloud-gateway-url"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud login id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudLogin(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCloudLoginWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud login id
     - GET /interface/cloud/login
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCloudLoginWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/cloud/login"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud mqtt period
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudMqttPeriod(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getCloudMqttPeriodWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud mqtt period
     - GET /interface/cloud/mqtt-period
     - Minimum period between 2 Mqtt smartphone sendings in ms : 0 = no
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getCloudMqttPeriodWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/interface/cloud/mqtt-period"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cloud password
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudPassword(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCloudPasswordWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cloud password
     - GET /interface/cloud/password
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCloudPasswordWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/cloud/password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the cloud service name
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudServiceName(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCloudServiceNameWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the cloud service name
     - GET /interface/cloud/service-name
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCloudServiceNameWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/cloud/service-name"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Crypted communication channel
     
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCom(data: Bytes? = nil, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getComWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Crypted communication channel
     - GET /secure-element/com
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<Bytes> 
     */
    open class func getComWithRequestBuilder(data: Bytes? = nil) -> RequestBuilder<Bytes> {
        let path = "/secure-element/com"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get config format firmware version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfigFormatFirmwareVersion(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getConfigFormatFirmwareVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get config format firmware version
     - GET /interface/config-format-firmware-version
     - Version du Firmware qui a écrit la conf. (écrit automatiquement lors de la conf par le Firmware, pas depuis le fichier de conf)
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getConfigFormatFirmwareVersionWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/config-format-firmware-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get config format version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfigFormatVersion(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getConfigFormatVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get config format version
     - GET /interface/config-format-version
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getConfigFormatVersionWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/config-format-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get config version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfigVersion(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getConfigVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get config version
     - GET /interface/config-version
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getConfigVersionWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/config-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get configuration of Secure Element
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfigure(completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getConfigureWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get configuration of Secure Element
     - GET /secure-element/configure
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Bytes> 
     */
    open class func getConfigureWithRequestBuilder() -> RequestBuilder<Bytes> {
        let path = "/secure-element/configure"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get current group id 
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentGroupId(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getCurrentGroupIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get current group id 
     - GET /interface/current-group-id
     - 
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getCurrentGroupIdWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/interface/current-group-id"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get current host protocol
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentHostProtocol(completion: @escaping ((_ data: HostProtocol?,_ error: Error?) -> Void)) {
        getCurrentHostProtocolWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get current host protocol
     - GET /interface/current-host-protocol
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<HostProtocol> 
     */
    open class func getCurrentHostProtocolWithRequestBuilder() -> RequestBuilder<HostProtocol> {
        let path = "/interface/current-host-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HostProtocol>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get current profile id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentProfileId(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getCurrentProfileIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get current profile id
     - GET /interface/current-profile/id
     - 
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getCurrentProfileIdWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/interface/current-profile/id"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get functions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFunctions(completion: @escaping ((_ data: AvailableFunction?,_ error: Error?) -> Void)) {
        getFunctionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get functions
     - GET /interface/functions
     - Get functions
     - examples: [{contentType=application/json, example={
  "debug" : true,
  "data_log" : true
}}]

     - returns: RequestBuilder<AvailableFunction> 
     */
    open class func getFunctionsWithRequestBuilder() -> RequestBuilder<AvailableFunction> {
        let path = "/interface/functions"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AvailableFunction>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get host inactivity period
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHostInactivityPeriod(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getHostInactivityPeriodWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get host inactivity period
     - GET /interface/host-inactivity-period
     - Host inactivity period before switch to standby mode or shutdown depending on optimisation level (res /1024//14)
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getHostInactivityPeriodWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/interface/host-inactivity-period"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get lock infos 
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLock(completion: @escaping ((_ data: InterfaceLock?,_ error: Error?) -> Void)) {
        getLockWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get lock infos 
     - GET /interface/lock
     - 
     - examples: [{contentType=application/json, example={
  "hash_password" : true,
  "resource_factory" : true,
  "factory_reset" : true,
  "resource_log_uid" : true,
  "scram_activated" : true
}}]

     - returns: RequestBuilder<InterfaceLock> 
     */
    open class func getLockWithRequestBuilder() -> RequestBuilder<InterfaceLock> {
        let path = "/interface/lock"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InterfaceLock>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get mqtt relay client id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayClientId(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayClientIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get mqtt relay client id
     - GET /interface/mqtt/relay/client-id
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayClientIdWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/client-id"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get mqtt relay login
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayLogin(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayLoginWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get mqtt relay login
     - GET /interface/mqtt/relay/login
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayLoginWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/login"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the mqtt net key for the server
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayNetKey(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayNetKeyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the mqtt net key for the server
     - GET /interface/mqtt/relay/net-key
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayNetKeyWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/net-key"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the mqtt relay password
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayPassword(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayPasswordWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the mqtt relay password
     - GET /interface/mqtt/relay/password
     - Mot de passe connexion au broker
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayPasswordWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get port of the mqtt broker
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayPort(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayPortWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get port of the mqtt broker
     - GET /interface/mqtt/relay/port
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayPortWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/port"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get mqtt relay url
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMqttRelayUrl(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getMqttRelayUrlWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get mqtt relay url
     - GET /interface/mqtt/relay/url
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getMqttRelayUrlWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/mqtt/relay/url"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get iotize gateway ip on the network
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNetworkGatewayIp(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getNetworkGatewayIpWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get iotize gateway ip on the network
     - GET /interface/network/gateway-ip
     - Adresse IP : ex 192.168.1.1. Seulement pour les IoTize Wifi. (vraiment ?)
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getNetworkGatewayIpWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/network/gateway-ip"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get IoTize device ip on the network
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNetworkInfraIp(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getNetworkInfraIpWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get IoTize device ip on the network
     - GET /interface/network/infra-ip
     - Adresse statique IP : ex 192.168.1.10. DHCP si adresse = 0.0.0.0. Seulement pour les IoTize Wifi.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getNetworkInfraIpWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/network/infra-ip"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get infrastructure ip mask
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNetworkInfraIpMask(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getNetworkInfraIpMaskWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get infrastructure ip mask
     - GET /interface/network/infra-ip-mask
     - Mask IP : ex 255.255.255.0. Seulement pour les IoTize Wifi.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getNetworkInfraIpMaskWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/network/infra-ip-mask"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get network mode
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNetworkMode(completion: @escaping ((_ data: NetworkMode?,_ error: Error?) -> Void)) {
        getNetworkModeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get network mode
     - GET /interface/network-mode
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<NetworkMode> 
     */
    open class func getNetworkModeWithRequestBuilder() -> RequestBuilder<NetworkMode> {
        let path = "/interface/network-mode"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NetworkMode>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if nfc paring is mandatory
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNfcPairingMode(completion: @escaping ((_ data: NfcPairingMode?,_ error: Error?) -> Void)) {
        getNfcPairingModeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if nfc paring is mandatory
     - GET /interface/nfc/pairing-mode
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<NfcPairingMode> 
     */
    open class func getNfcPairingModeWithRequestBuilder() -> RequestBuilder<NfcPairingMode> {
        let path = "/interface/nfc/pairing-mode"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NfcPairingMode>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get power optimization level
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPowerOptimisationLevel(completion: @escaping ((_ data: LowPowerOptimisationLevel?,_ error: Error?) -> Void)) {
        getPowerOptimisationLevelWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get power optimization level
     - GET /interface/power-optimisation-level
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<LowPowerOptimisationLevel> 
     */
    open class func getPowerOptimisationLevelWithRequestBuilder() -> RequestBuilder<LowPowerOptimisationLevel> {
        let path = "/interface/power-optimisation-level"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LowPowerOptimisationLevel>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the public password ?
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicPassword(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getPublicPasswordWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the public password ?
     - GET /interface/public-password
     - Password utilisé pour l'enregistrement. Également défaut du MQTT Relay PWD
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getPublicPasswordWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/public-password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Generate a random number
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRand(completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getRandWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate a random number
     - GET /interface/rand
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Bytes> 
     */
    open class func getRandWithRequestBuilder() -> RequestBuilder<Bytes> {
        let path = "/interface/rand"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get network key
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWepKey(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getWepKeyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get network key
     - GET /interface/wep-key
     - Clé WAP / WEP pour connection réseau infrastructure & P2P
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getWepKeyWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/wep-key"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get wifi hostname
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWifiHostname(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getWifiHostnameWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get wifi hostname
     - GET /interface/wifi/hostname
     - Hostname par exemple, à lire par NFC pour connection socket à un IoTize Wifi en mode infrastructure avec DHCP
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getWifiHostnameWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/wifi/hostname"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get wifi ssid
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWifiSSID(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getWifiSSIDWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get wifi ssid
     - GET /interface/wifi/ssid
     - May be null if not connected to any network
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getWifiSSIDWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/interface/wifi/ssid"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Keep alive.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func keepAlive(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        keepAliveWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Keep alive.
     - GET /interface/keep-alive
     - Call this method to ensure communication resources are maintain.
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func keepAliveWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/interface/keep-alive"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Login
     
     - parameter credential: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(credential: LoginCredential? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(credential: credential).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Login
     - POST /interface/login
     - User login with username and password
     
     - parameter credential: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func loginWithRequestBuilder(credential: LoginCredential? = nil) -> RequestBuilder<Void> {
        let path = "/interface/login"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: credential)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        logoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logout
     - POST /interface/logout
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/interface/logout"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Execute multiple commands sent in one frame, and return all answers in one
     
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multiCommands(data: MultiCommands? = nil, completion: @escaping ((_ data: MultiResponses?,_ error: Error?) -> Void)) {
        multiCommandsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Execute multiple commands sent in one frame, and return all answers in one
     - GET /interface/multi-commands
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<MultiResponses> 
     */
    open class func multiCommandsWithRequestBuilder(data: MultiCommands? = nil) -> RequestBuilder<MultiResponses> {
        let path = "/interface/multi-commands"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiResponses>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Admnistration login
     
     - parameter uid: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLoginUid(uid: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLoginUidWithRequestBuilder(uid: uid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Admnistration login
     - POST /interface/login-uid
     - Log in as an administrator thanks to the UID
     
     - parameter uid: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postLoginUidWithRequestBuilder(uid: Bytes) -> RequestBuilder<Void> {
        let path = "/interface/login-uid"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uid)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set application name
     
     - parameter appName: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAppName(appName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAppNameWithRequestBuilder(appName: appName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set application name
     - PUT /interface/app-name
     - 
     
     - parameter appName: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putAppNameWithRequestBuilder(appName: String) -> RequestBuilder<Void> {
        let path = "/interface/app-name"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "appName": appName
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set app path
     
     - parameter version: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAppPath(version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAppPathWithRequestBuilder(version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set app path
     - PUT /interface/app-path
     - 
     
     - parameter version: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putAppPathWithRequestBuilder(version: String) -> RequestBuilder<Void> {
        let path = "/interface/app-path"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write authorized host protocols
     
     - parameter mode: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizedHostProtocol(mode: ListHostProtocol? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAuthorizedHostProtocolWithRequestBuilder(mode: mode).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write authorized host protocols
     - PUT /interface/authorized-host-protocol
     - 
     
     - parameter mode: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putAuthorizedHostProtocolWithRequestBuilder(mode: ListHostProtocol? = nil) -> RequestBuilder<Void> {
        let path = "/interface/authorized-host-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mode)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write cloud connection mode
     
     - parameter key: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCloudConnectionMode(key: CloudConnectionMode? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCloudConnectionModeWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write cloud connection mode
     - PUT /interface/cloud/connection-mode
     - 
     
     - parameter key: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putCloudConnectionModeWithRequestBuilder(key: CloudConnectionMode? = nil) -> RequestBuilder<Void> {
        let path = "/interface/cloud/connection-mode"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: key)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write cloud gateway url
     
     - parameter version: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCloudGatewayUrl(version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCloudGatewayUrlWithRequestBuilder(version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write cloud gateway url
     - PUT /interface/cloud-gateway-url
     - 
     
     - parameter version: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putCloudGatewayUrlWithRequestBuilder(version: String) -> RequestBuilder<Void> {
        let path = "/interface/cloud-gateway-url"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write cloud mqtt period
     
     - parameter key: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCloudMqttPeriod(key: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCloudMqttPeriodWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write cloud mqtt period
     - PUT /interface/cloud/mqtt-period
     - 
     
     - parameter key: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putCloudMqttPeriodWithRequestBuilder(key: Int? = nil) -> RequestBuilder<Void> {
        let path = "/interface/cloud/mqtt-period"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "key": key?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write cloud password
     
     - parameter key: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCloudPassword(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCloudPasswordWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write cloud password
     - PUT /interface/cloud/password
     - 
     
     - parameter key: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putCloudPasswordWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/cloud/password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "key": key
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write cloud service name
     
     - parameter name: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCloudServiceName(name: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCloudServiceNameWithRequestBuilder(name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write cloud service name
     - PUT /interface/cloud/service-name
     - 
     
     - parameter name: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putCloudServiceNameWithRequestBuilder(name: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/cloud/service-name"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set config format version
     
     - parameter configFormat: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConfigFormatVersion(configFormat: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putConfigFormatVersionWithRequestBuilder(configFormat: configFormat).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set config format version
     - PUT /interface/config-format-version
     - 
     
     - parameter configFormat: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putConfigFormatVersionWithRequestBuilder(configFormat: Int) -> RequestBuilder<Void> {
        let path = "/interface/config-format-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "configFormat": configFormat.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set config version
     
     - parameter version: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConfigVersion(version: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putConfigVersionWithRequestBuilder(version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set config version
     - PUT /interface/config-version
     - 
     
     - parameter version: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putConfigVersionWithRequestBuilder(version: Int) -> RequestBuilder<Void> {
        let path = "/interface/config-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write secure element configuration
     
     - parameter conf: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConfigure(conf: Bytes? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putConfigureWithRequestBuilder(conf: conf).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write secure element configuration
     - PUT /secure-element/configure
     - 
     
     - parameter conf: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putConfigureWithRequestBuilder(conf: Bytes? = nil) -> RequestBuilder<Void> {
        let path = "/secure-element/configure"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: conf)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write current host protocol
     
     - parameter hostProtocol: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCurrentHostProtocol(hostProtocol: HostProtocol, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCurrentHostProtocolWithRequestBuilder(hostProtocol: hostProtocol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write current host protocol
     - PUT /interface/current-host-protocol
     - 
     
     - parameter hostProtocol: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putCurrentHostProtocolWithRequestBuilder(hostProtocol: HostProtocol) -> RequestBuilder<Void> {
        let path = "/interface/current-host-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hostProtocol)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write host inactivity period
     
     - parameter key: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putHostInactivityPeriod(key: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putHostInactivityPeriodWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write host inactivity period
     - PUT /interface/host-inactivity-period
     - 
     
     - parameter key: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putHostInactivityPeriodWithRequestBuilder(key: Int? = nil) -> RequestBuilder<Void> {
        let path = "/interface/host-inactivity-period"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "key": key?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set lock infos 
     
     - parameter infos: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLock(infos: InterfaceLock, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putLockWithRequestBuilder(infos: infos).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set lock infos 
     - PUT /interface/lock
     - 
     
     - parameter infos: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putLockWithRequestBuilder(infos: InterfaceLock) -> RequestBuilder<Void> {
        let path = "/interface/lock"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: infos)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write mqtt net key
     
     - parameter netkey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMqttRelayNetKey(netkey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMqttRelayNetKeyWithRequestBuilder(netkey: netkey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write mqtt net key
     - PUT /interface/mqtt/relay/net-key
     - 
     
     - parameter netkey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putMqttRelayNetKeyWithRequestBuilder(netkey: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/mqtt/relay/net-key"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "netkey": netkey
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write mqtt relay password
     
     - parameter url: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMqttRelayPassword(url: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMqttRelayPasswordWithRequestBuilder(url: url).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write mqtt relay password
     - PUT /interface/mqtt/relay/password
     - 
     
     - parameter url: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putMqttRelayPasswordWithRequestBuilder(url: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/mqtt/relay/password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "url": url
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write service name of the mqtt broker
     
     - parameter url: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMqttRelayPort(url: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMqttRelayPortWithRequestBuilder(url: url).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write service name of the mqtt broker
     - PUT /interface/mqtt/relay/port
     - 
     
     - parameter url: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putMqttRelayPortWithRequestBuilder(url: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/mqtt/relay/port"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "url": url
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write mqtt relay url
     
     - parameter url: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMqttRelayUrl(url: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMqttRelayUrlWithRequestBuilder(url: url).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write mqtt relay url
     - PUT /interface/mqtt/relay/url
     - 
     
     - parameter url: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putMqttRelayUrlWithRequestBuilder(url: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/mqtt/relay/url"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "url": url
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write iotize gateway ip
     
     - parameter key: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNetworkGatewayIp(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNetworkGatewayIpWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write iotize gateway ip
     - PUT /interface/network/gateway-ip
     - 
     
     - parameter key: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putNetworkGatewayIpWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/network/gateway-ip"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: key)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write infrastructure ip
     
     - parameter key: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNetworkInfraIp(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNetworkInfraIpWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write infrastructure ip
     - PUT /interface/network/infra-ip
     - 
     
     - parameter key: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putNetworkInfraIpWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/network/infra-ip"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: key)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write infrastructure ip mask
     
     - parameter key: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNetworkInfraIpMask(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNetworkInfraIpMaskWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write infrastructure ip mask
     - PUT /interface/network/infra-ip-mask
     - 
     
     - parameter key: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putNetworkInfraIpMaskWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/network/infra-ip-mask"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: key)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write network mode
     
     - parameter mode: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNetworkMode(mode: NetworkMode? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNetworkModeWithRequestBuilder(mode: mode).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write network mode
     - PUT /interface/network-mode
     - 
     
     - parameter mode: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putNetworkModeWithRequestBuilder(mode: NetworkMode? = nil) -> RequestBuilder<Void> {
        let path = "/interface/network-mode"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mode)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Change wether if nfc pairing is mandatory
     
     - parameter mode: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNfcPairingMode(mode: NfcPairingMode? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNfcPairingModeWithRequestBuilder(mode: mode).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Change wether if nfc pairing is mandatory
     - PUT /interface/nfc/pairing-mode
     - 
     
     - parameter mode: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putNfcPairingModeWithRequestBuilder(mode: NfcPairingMode? = nil) -> RequestBuilder<Void> {
        let path = "/interface/nfc/pairing-mode"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mode)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write power optimization level
     
     - parameter mode: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putPowerOptimisationLevel(mode: LowPowerOptimisationLevel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putPowerOptimisationLevelWithRequestBuilder(mode: mode).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write power optimization level
     - PUT /interface/power-optimisation-level
     - 
     
     - parameter mode: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putPowerOptimisationLevelWithRequestBuilder(mode: LowPowerOptimisationLevel? = nil) -> RequestBuilder<Void> {
        let path = "/interface/power-optimisation-level"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mode)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write network key
     
     - parameter key: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWepKey(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putWepKeyWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write network key
     - PUT /interface/wep-key
     - 
     
     - parameter key: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putWepKeyWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/wep-key"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "key": key
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write wifi ssid
     
     - parameter key: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWifiSsid(key: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putWifiSsidWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write wifi ssid
     - PUT /interface/wifi/ssid
     - 
     
     - parameter key: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putWifiSsidWithRequestBuilder(key: String? = nil) -> RequestBuilder<Void> {
        let path = "/interface/wifi/ssid"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "key": key
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Apply the new configuration on the device
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reloadConfig(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reloadConfigWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Apply the new configuration on the device
     - POST /interface/config-version
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func reloadConfigWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/interface/config-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

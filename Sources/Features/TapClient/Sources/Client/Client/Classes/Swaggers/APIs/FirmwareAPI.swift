//
// FirmwareAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FirmwareAPI {
    /**
     Get state
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getState(completion: @escaping ((_ data: FirmwareState?,_ error: Error?) -> Void)) {
        getStateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get state
     - GET /firmware/state
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<FirmwareState> 
     */
    open class func getStateWithRequestBuilder() -> RequestBuilder<FirmwareState> {
        let path = "/firmware/state"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FirmwareState>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get firmware update result
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUpdateResult(completion: @escaping ((_ data: FirmwareUpdateResult?,_ error: Error?) -> Void)) {
        getUpdateResultWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get firmware update result
     - GET /firmware/update-result
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<FirmwareUpdateResult> 
     */
    open class func getUpdateResultWithRequestBuilder() -> RequestBuilder<FirmwareUpdateResult> {
        let path = "/firmware/update-result"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FirmwareUpdateResult>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check CRC
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCrcCheck(data: CrcCheckBody, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        postCrcCheckWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check CRC
     - POST /firmware/crc-check
     - Compare le CRC attendu au CRC de la zone référencée. Modifie le Update Result (resource /5//5) à 1 si OK ou 5 si NG.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func postCrcCheckWithRequestBuilder(data: CrcCheckBody) -> RequestBuilder<Bytes> {
        let path = "/firmware/crc-check"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Firmware package 
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackage(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPackageWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Firmware package 
     - POST /firmware/package
     - Firmware package : actif uniquement en mode update. Permet de transférer les données à programmer en flash pour l'update firmware.

     - returns: RequestBuilder<Void> 
     */
    open class func postPackageWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/firmware/package"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUpdate(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUpdateWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update
     - POST /firmware/update
     - Contrôle de l'update: passage en mode update/updater/normal. Param: état futur souhaité. Actif uniquement si loggé en admin. (plus autres contraintes à définir: CRC check fait, etc.) Peut nécessiter un Reset du module

     - returns: RequestBuilder<Void> 
     */
    open class func postUpdateWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/firmware/update"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

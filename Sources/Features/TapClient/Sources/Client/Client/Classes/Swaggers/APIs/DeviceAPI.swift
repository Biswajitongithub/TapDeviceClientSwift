//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DeviceAPI {
    /**
     Factory reset
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func factoryReset(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        factoryResetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Factory reset
     - POST /device/factory-reset

     - returns: RequestBuilder<Void> 
     */
    open class func factoryResetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/device/factory-reset"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get available power sources
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailablePowerSource(completion: @escaping ((_ data: AvailablePowerSource?,_ error: Error?) -> Void)) {
        getAvailablePowerSourceWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get available power sources
     - GET /device/available-power-source
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<AvailablePowerSource> 
     */
    open class func getAvailablePowerSourceWithRequestBuilder() -> RequestBuilder<AvailablePowerSource> {
        let path = "/device/available-power-source"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AvailablePowerSource>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device current time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentTime(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getCurrentTimeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device current time
     - GET /device/current-time
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getCurrentTimeWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/current-time"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device firmware version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFirmwareVersion(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFirmwareVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device firmware version
     - GET /device/firmware-version
     - 
     - examples: [{contentType=application/json, example="1.0 Oct  8 2015 11:02:05Â "}]

     - returns: RequestBuilder<String> 
     */
    open class func getFirmwareVersionWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/firmware-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device last error code
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLastErrorCode(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getLastErrorCodeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device last error code
     - GET /device/last-error-code
     - 
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getLastErrorCodeWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/device/last-error-code"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get manufacturer name
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getManufacturer(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getManufacturerWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get manufacturer name
     - GET /device/manufacturer
     - 
     - examples: [{contentType=application/json, example="IoTize"}]

     - returns: RequestBuilder<String> 
     */
    open class func getManufacturerWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/manufacturer"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device memory free
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMemoryFree(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getMemoryFreeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device memory free
     - GET /device/memory-free
     - In bytes
     - examples: [{contentType=application/json, example=12300}]

     - returns: RequestBuilder<Int> 
     */
    open class func getMemoryFreeWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/device/memory-free"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device model name
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelName(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getModelNameWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device model name
     - GET /device/model-name
     - 
     - examples: [{contentType=application/json, example="IoTize microTAP NFC"}]

     - returns: RequestBuilder<String> 
     */
    open class func getModelNameWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/model-name"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get power source voltage
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPowerSourceVoltage(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getPowerSourceVoltageWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get power source voltage
     - GET /device/power-source-voltage
     - examples: [{contentType=application/json, example=12300}]

     - returns: RequestBuilder<Int> 
     */
    open class func getPowerSourceVoltageWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/device/power-source-voltage"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get public password
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicPassword(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getPublicPasswordWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get public password
     - GET /device/public-password
     - Password pour l'enregistrement. Egalement valeur par dÃ©faut des password Cloud et MQTTRelay
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getPublicPasswordWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/public-password"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get device serial number
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSerialNumber(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getSerialNumberWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get device serial number
     - GET /device/serial-number
     - 
     - examples: [{contentType=application/json, example="IoTize004100000001"}]

     - returns: RequestBuilder<String> 
     */
    open class func getSerialNumberWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/device/serial-number"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     ???
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLastErrorCode(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLastErrorCodeWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     ???
     - POST /device/last-error-code
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func postLastErrorCodeWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/device/last-error-code"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set device current time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCurrentTime(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCurrentTimeWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set device current time
     - PUT /device/current-time
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func putCurrentTimeWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/device/current-time"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reboot device
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reboot(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rebootWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reboot device
     - POST /device/reboot

     - returns: RequestBuilder<Void> 
     */
    open class func rebootWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/device/reboot"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reset device last error code
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetLastErrorCode(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resetLastErrorCodeWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset device last error code
     - POST /device/reset-last-error-code
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func resetLastErrorCodeWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/device/reset-last-error-code"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

//
// VariableAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VariableAPI {
    /**
     Get variable address
     
     - parameter variableId: (path) ID of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAddress(variableId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getAddressWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get variable address
     - GET /variable/{variableId}/address
     - 
     - examples: [{contentType=application/json, example=0}]
     
     - parameter variableId: (path) ID of the variable 

     - returns: RequestBuilder<Int> 
     */
    open class func getAddressWithRequestBuilder(variableId: Int) -> RequestBuilder<Int> {
        var path = "/variable/{variableId}/address"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get variable bundle id
     
     - parameter variableId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBundleId(variableId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getBundleIdWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get variable bundle id
     - GET /variable/{variableId}/bundle/id
     - ID du bundle qui contient la variable
     - examples: [{contentType=application/json, example=0}]
     
     - parameter variableId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getBundleIdWithRequestBuilder(variableId: Int) -> RequestBuilder<Int> {
        var path = "/variable/{variableId}/bundle/id"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get variable bundle values
     
     - parameter variableId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBundleValues(variableId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getBundleValuesWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get variable bundle values
     - GET /variable/{variableId}/bundle/values
     - 
     - examples: [{contentType=application/json, example=0}]
     
     - parameter variableId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getBundleValuesWithRequestBuilder(variableId: Int) -> RequestBuilder<Int> {
        var path = "/variable/{variableId}/bundle/values"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get access rights for the variable
     
     - parameter variableId: (path) ID of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentAccess(variableId: Int, completion: @escaping ((_ data: ReadWriteRights?,_ error: Error?) -> Void)) {
        getCurrentAccessWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get access rights for the variable
     - GET /variable/{variableId}/current-access
     - Get access rights for the variable (read and write)
     - examples: [{contentType=application/json, example={
  "read" : true,
  "write" : true
}}]
     
     - parameter variableId: (path) ID of the variable 

     - returns: RequestBuilder<ReadWriteRights> 
     */
    open class func getCurrentAccessWithRequestBuilder(variableId: Int) -> RequestBuilder<ReadWriteRights> {
        var path = "/variable/{variableId}/current-access"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReadWriteRights>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get data format for variable
     
     - parameter variableId: (path) ID of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFormat(variableId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getFormatWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get data format for variable
     - GET /variable/{variableId}/format
     - examples: [{contentType=application/json, example=0}]
     
     - parameter variableId: (path) ID of the variable 

     - returns: RequestBuilder<Int> 
     */
    open class func getFormatWithRequestBuilder(variableId: Int) -> RequestBuilder<Int> {
        var path = "/variable/{variableId}/format"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get variable array size
     
     - parameter variableId: (path) ID of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNumberOfElements(variableId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getNumberOfElementsWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get variable array size
     - GET /variable/{variableId}/number-of-elements
     - Get the number of element of the variable
     - examples: [{contentType=application/json, example=0}]
     
     - parameter variableId: (path) ID of the variable 

     - returns: RequestBuilder<Int> 
     */
    open class func getNumberOfElementsWithRequestBuilder(variableId: Int) -> RequestBuilder<Int> {
        var path = "/variable/{variableId}/number-of-elements"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get variable value
     
     - parameter variableId: (path) ID of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getValue(variableId: Int, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getValueWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get variable value
     - GET /variable/{variableId}/value
     - Value of array of values. The size depends of variable format
     - examples: [{contentType=application/json, example=""}]
     
     - parameter variableId: (path) ID of the variable 

     - returns: RequestBuilder<Bytes> 
     */
    open class func getValueWithRequestBuilder(variableId: Int) -> RequestBuilder<Bytes> {
        var path = "/variable/{variableId}/value"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write variable address
     
     - parameter variableId: (path) ID of the variable 
     - parameter address: (query) New address of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAddress(variableId: Int, address: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAddressWithRequestBuilder(variableId: variableId, address: address).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write variable address
     - PUT /variable/{variableId}/address
     - 
     
     - parameter variableId: (path) ID of the variable 
     - parameter address: (query) New address of the variable 

     - returns: RequestBuilder<Void> 
     */
    open class func putAddressWithRequestBuilder(variableId: Int, address: Int) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/address"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write variable bundle id
     
     - parameter variableId: (path)  
     - parameter value: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putBundleId(variableId: Int, value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putBundleIdWithRequestBuilder(variableId: variableId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write variable bundle id
     - PUT /variable/{variableId}/bundle/id
     - 
     
     - parameter variableId: (path)  
     - parameter value: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putBundleIdWithRequestBuilder(variableId: Int, value: Int) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/bundle/id"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set data format of the variable
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (query) New format of the variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFormat(variableId: Int, value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFormatWithRequestBuilder(variableId: variableId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set data format of the variable
     - PUT /variable/{variableId}/format
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (query) New format of the variable 

     - returns: RequestBuilder<Void> 
     */
    open class func putFormatWithRequestBuilder(variableId: Int, value: Int) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/format"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write variable array size
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (query) New number of element for this variable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNumberOfElements(variableId: Int, value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNumberOfElementsWithRequestBuilder(variableId: variableId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write variable array size
     - PUT /variable/{variableId}/number-of-elements
     - Set the number of element of the variable
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (query) New number of element for this variable 

     - returns: RequestBuilder<Void> 
     */
    open class func putNumberOfElementsWithRequestBuilder(variableId: Int, value: Int) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/number-of-elements"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set variable value
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putValue(variableId: Int, value: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putValueWithRequestBuilder(variableId: variableId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set variable value
     - PUT /variable/{variableId}/value
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putValueWithRequestBuilder(variableId: Int, value: Bytes) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/value"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set variable value
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setValue(variableId: Int, value: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setValueWithRequestBuilder(variableId: variableId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set variable value
     - POST /variable/{variableId}/set-value
     - Difference with put ? 
     
     - parameter variableId: (path) ID of the variable 
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func setValueWithRequestBuilder(variableId: Int, value: Bytes) -> RequestBuilder<Void> {
        var path = "/variable/{variableId}/set-value"
        let variableIdPreEscape = "\(variableId)"
        let variableIdPostEscape = variableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{variableId}", with: variableIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}

//
// AclAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AclAPI {
    /**
     Get ACL object instance id
     
     - parameter objectId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInstanceId(objectId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getInstanceIdWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ACL object instance id
     - GET /acl/{objectId}/instance-id
     - 
     - examples: [{contentType=application/json, example=0}]
     
     - parameter objectId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getInstanceIdWithRequestBuilder(objectId: Int) -> RequestBuilder<Int> {
        var path = "/acl/{objectId}/instance-id"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get ACL list
     
     - parameter objectId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getList(objectId: Int, completion: @escaping ((_ data: ListAclEntry?,_ error: Error?) -> Void)) {
        getListWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ACL list
     - GET /acl/{objectId}/list
     - Ressource contenant les droits d'un groupe sur cet objetÂ : * ressource instance ID = Short Server ID du groupe
     - examples: [{contentType=application/json, example=""}]
     
     - parameter objectId: (path)  

     - returns: RequestBuilder<ListAclEntry> 
     */
    open class func getListWithRequestBuilder(objectId: Int) -> RequestBuilder<ListAclEntry> {
        var path = "/acl/{objectId}/list"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListAclEntry>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get acl object id
     
     - parameter objectId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getObjectId(objectId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getObjectIdWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get acl object id
     - GET /acl/{objectId}/object-id
     - examples: [{contentType=application/json, example=0}]
     
     - parameter objectId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getObjectIdWithRequestBuilder(objectId: Int) -> RequestBuilder<Int> {
        var path = "/acl/{objectId}/object-id"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get ACL group owner id
     
     - parameter objectId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOwner(objectId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getOwnerWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ACL group owner id
     - GET /acl/{objectId}/owner
     - 
     - examples: [{contentType=application/json, example=0}]
     
     - parameter objectId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getOwnerWithRequestBuilder(objectId: Int) -> RequestBuilder<Int> {
        var path = "/acl/{objectId}/owner"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write ACL
     
     - parameter objectId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putList(objectId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putListWithRequestBuilder(objectId: objectId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write ACL
     - PUT /acl/{objectId}/list
     - 
     
     - parameter objectId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func putListWithRequestBuilder(objectId: Int) -> RequestBuilder<Void> {
        var path = "/acl/{objectId}/list"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set access control owner group
     
     - parameter objectId: (path)  
     - parameter ownerId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOwner(objectId: Int, ownerId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putOwnerWithRequestBuilder(objectId: objectId, ownerId: ownerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set access control owner group
     - PUT /acl/{objectId}/owner
     - 
     
     - parameter objectId: (path)  
     - parameter ownerId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putOwnerWithRequestBuilder(objectId: Int, ownerId: Int) -> RequestBuilder<Void> {
        var path = "/acl/{objectId}/owner"
        let objectIdPreEscape = "\(objectId)"
        let objectIdPostEscape = objectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectId}", with: objectIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ownerId": ownerId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

//
// GroupAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
// 



open class GroupAPI {


    /**
    * Get group alias
    * ID du groupe dont ce groupe hérite les droits. Si l&#39;Alias correspond à l&#39;ID du groupe, alors c&#39;est un Profile, sinon c&#39;est un User.
    * LWM2M path: /1025/{groupId}/5

    * @param groupId input
    * @return Int api call
    */
    public func getAlias(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/alias"
            
        )
    }
    /**
    * Get the name of the group
    * 
    * LWM2M path: /1025/{groupId}/0

    * @param groupId input
    * @return String api call
    */
    public func getName(
        groupId: Int
    ) -> ApiRequest<String>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/name"
            
        )
    }
    /**
    * Get scram user iteration
    * SCRAM Hash Iteration: Nombre d&#39;itérations utilisé en SCRAM pour le dernier hashage. Nombre &gt;1000, généré aléatoirement à l&#39;écriture de la conf dans l&#39;IoTize.
    * LWM2M path: /1025/{groupId}/7

    * @param groupId input
    * @return Int api call
    */
    public func getScramUserIteration(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/scram-user-iteration"
            
        )
    }
    /**
    * Get scram user salt
    * User-specific salt utilisé (avec le User Name) pour saller les hashs du password StoredKey et ServerKey. Ecrit par Exec/SetPWD
    * LWM2M path: /1025/{groupId}/16

    * @param groupId input
    * @return Int api call
    */
    public func getScramUserSalt(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/scram-user-salt"
            
        )
    }
    /**
    * Get the maximum session lifetime
    * 
    * LWM2M path: /1025/{groupId}/4

    * @param groupId input
    * @return Int api call
    */
    public func getSessionLifetime(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/session-lifetime"
            
        )
    }
    /**
    * Update password
    * Demande de modification du Pwd, arguments :* pwd (16 chars) in no security or 1-hash modes.* StoredKey+ServerKey+UserSalt+UserIt (40 uchar) in SCRAM multi-hash mode
    * LWM2M path: /1025/{groupId}/2
    * Body converter id: "string"

    * @param groupId input

    * @param password input
    * @return  api call
    */
    public func postPassword(
        groupId: Int, password: String
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/group/{groupId}/password"
            
            , body: password
        )
    }
    /**
    * Write group alias
    * 
    * LWM2M path: /1025/{groupId}/5
    * Body converter id: "integer_uint16"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putAlias(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/alias"
            
            , body: value
        )
    }
    /**
    * Write group name
    * 
    * LWM2M path: /1025/{groupId}/0
    * Body converter id: "string"

    * @param groupId input

    * @param name input
    * @return  api call
    */
    public func putName(
        groupId: Int, name: String
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/name"
            
            , body: name
        )
    }
    /**
    * Write scram user iteration
    * 
    * LWM2M path: /1025/{groupId}/7
    * Body converter id: "integer_uint32"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putScramUserIteration(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/scram-user-iteration"
            
            , body: value
        )
    }
    /**
    * Write scram user salt
    * 
    * LWM2M path: /1025/{groupId}/16
    * Body converter id: "integer_uint32"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putScramUserSalt(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/scram-user-salt"
            
            , body: value
        )
    }
    /**
    * Write session lifetime
    * 
    * LWM2M path: /1025/{groupId}/4
    * Body converter id: "integer_uint16"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putSessionLifetime(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/session-lifetime"
            
            , body: value
        )
    }

}

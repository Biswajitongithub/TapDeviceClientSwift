//
// DataLogAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
// 



open class DataLogAPI {


    /**
    * Dequeue one packet
    * Dequeue one packet in the FIFO list (Firt In First Out) of datalog packets
    * LWM2M path: /1031//11
    * @return SinglePacket api call
    */
    public func dequeueOnePacket()
         -> ApiRequest<SinglePacket>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/datalog/dequeue-packet"
        )
    }
    /**
    * Flush data log packets
    * Reinitialisation : efface tous les paquets de la mémoire de l&#39;IoTize. Seulement en état Stop ? Stop implicite avant le flush ? Run implicite après le flush ?
    * LWM2M path: /1031//4
    * @return  api call
    */
    public func flush()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/datalog/flush"
        )
    }
    /**
    * Get the maximum number of packet
    * 
    * LWM2M path: /1024//23
    * @return Int api call
    */
    public func getMaxPacketCount()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/datalog/max-packet-count"
        )
    }
    /**
    * Get data log options
    * 
    * LWM2M path: /1031//2
    * @return DataLogOption api call
    */
    public func getOptions()
         -> ApiRequest<DataLogOption>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/datalog/options"
        )
    }
    /**
    * Get number of pending datalog packet
    * Get the number of data log packet available
    * LWM2M path: /1031//10
    * @return Int api call
    */
    public func getPacketCount()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/datalog/packet-count"
        )
    }
    /**
    * Write data log crypto key
    * Hash du password DataLoggin. Utilisé (combiné à d&#39;autres choses) pour crypter le paquet avant de le stocker dans l&#39;OutBox.
    * LWM2M path: /1031//3
    * Body converter id: "Bytes"

    * @param value input
    * @return  api call
    */
    public func putCryptoKey(
        value: Bytes
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/datalog/crypto-key"
            , body: value
        )
    }
    /**
    * Write data log option
    * 
    * LWM2M path: /1031//2
    * Body converter id: "DataLogOption"

    * @param value input
    * @return  api call
    */
    public func putOptions(
        value: DataLogOption
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/datalog/options"
            , body: value
        )
    }
    /**
    * Run datalog acquisition
    * Start data log packet acquisition
    * LWM2M path: /1031//0
    * @return  api call
    */
    public func run()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/datalog/run"
        )
    }
    /**
    * Stop datalog acquisition
    * Stop data log packet acquisition
    * LWM2M path: /1031//1
    * @return  api call
    */
    public func stop()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/datalog/stop"
        )
    }

}

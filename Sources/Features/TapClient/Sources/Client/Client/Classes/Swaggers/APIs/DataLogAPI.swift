//
// DataLogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DataLogAPI {
    /**
     Dequeue one packet
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dequeueOnePacket(completion: @escaping ((_ data: SinglePacket?,_ error: Error?) -> Void)) {
        dequeueOnePacketWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Dequeue one packet
     - GET /datalog/dequeue-packet
     - Dequeue one packet in the FIFO list (Firt In First Out) of datalog packets
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<SinglePacket> 
     */
    open class func dequeueOnePacketWithRequestBuilder() -> RequestBuilder<SinglePacket> {
        let path = "/datalog/dequeue-packet"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SinglePacket>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Flush data log packets
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func flush(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        flushWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Flush data log packets
     - POST /datalog/flush
     - Reinitialisation : efface tous les paquets de la mémoire de l'IoTize. Seulement en état Stop ? Stop implicite avant le flush ? Run implicite après le flush ?

     - returns: RequestBuilder<Void> 
     */
    open class func flushWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/datalog/flush"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the maximum number of packet
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMaxPacketCount(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getMaxPacketCountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the maximum number of packet
     - GET /datalog/max-packet-count
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getMaxPacketCountWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/datalog/max-packet-count"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get data log options
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOptions(completion: @escaping ((_ data: DataLogOption?,_ error: Error?) -> Void)) {
        getOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get data log options
     - GET /datalog/options
     - examples: [{contentType=application/json, example={
  "logOnChange" : true,
  "security" : true,
  "qos" : true,
  "autorun" : true,
  "rollingMode" : true
}}]

     - returns: RequestBuilder<DataLogOption> 
     */
    open class func getOptionsWithRequestBuilder() -> RequestBuilder<DataLogOption> {
        let path = "/datalog/options"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataLogOption>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get number of pending datalog packet
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPacketCount(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getPacketCountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get number of pending datalog packet
     - GET /datalog/packet-count
     - Get the number of data log packet available
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getPacketCountWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/datalog/packet-count"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write data log crypto key
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCryptoKey(value: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCryptoKeyWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write data log crypto key
     - PUT /datalog/crypto-key
     - Hash du password DataLoggin. Utilisé (combiné à d'autres choses) pour crypter le paquet avant de le stocker dans l'OutBox.
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putCryptoKeyWithRequestBuilder(value: Bytes) -> RequestBuilder<Void> {
        let path = "/datalog/crypto-key"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write data log option
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOptions(value: DataLogOption, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putOptionsWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write data log option
     - PUT /datalog/options
     - 
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putOptionsWithRequestBuilder(value: DataLogOption) -> RequestBuilder<Void> {
        let path = "/datalog/options"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run datalog acquisition
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func run(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        runWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Run datalog acquisition
     - POST /datalog/run
     - Start data log packet acquisition

     - returns: RequestBuilder<Void> 
     */
    open class func runWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/datalog/run"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop datalog acquisition
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stop(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stopWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop datalog acquisition
     - POST /datalog/stop
     - Stop data log packet acquisition

     - returns: RequestBuilder<Void> 
     */
    open class func stopWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/datalog/stop"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

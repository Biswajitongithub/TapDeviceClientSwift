//
// UartSettings.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct UartSettings: Codable {

    public enum PhysicalPort: String, Codable { 
        case _none = "NONE"
        case rs232 = "RS232"
        case rs485 = "RS485"
        case usb = "USB"
        case uart = "UART"
        case can = "CAN"
        case terminaisonActive = "TERMINAISON_ACTIVE"
    }
    public enum StopBit: String, Codable { 
        case one = "ONE"
        case oneAndHalf = "ONE_AND_HALF"
        case two = "TWO"
    }
    public enum BitParity: String, Codable { 
        case even = "EVEN"
        case odd = "ODD"
        case _none = "NONE"
    }
    public enum Handshake: String, Codable { 
        case _none = "NONE"
        case rts = "RTS"
        case cts = "CTS"
        case rtsCts = "RTS_CTS"
        case dtrDsr = "DTR_DSR"
        case xonXoff = "XON_XOFF"
    }
    public enum HandshakeDelimiter: String, Codable { 
        case _none = "NONE"
        case cr = "CR"
        case lf = "LF"
        case crLf = "CR_LF"
    }
    public var physicalPort: PhysicalPort?
    public var stopBit: StopBit?
    public var bitParity: BitParity?
    public var dataBitsLength: Double?
    public var handshake: Handshake?
    public var handshakeDelimiter: HandshakeDelimiter?
    /** This value is important. This should be set to the maximum number of character your expecting from the target application response (depending on the baudrate of your application). 0 means that the timeout error will be immediately thrown. */
    public var timeout: Int?
    public var baudRate: Int?
    public var ofs: Int?
    public var slv: Int?

    public init(physicalPort: PhysicalPort?, stopBit: StopBit?, bitParity: BitParity?, dataBitsLength: Double?, handshake: Handshake?, handshakeDelimiter: HandshakeDelimiter?, timeout: Int?, baudRate: Int?, ofs: Int?, slv: Int?) {
        self.physicalPort = physicalPort
        self.stopBit = stopBit
        self.bitParity = bitParity
        self.dataBitsLength = dataBitsLength
        self.handshake = handshake
        self.handshakeDelimiter = handshakeDelimiter
        self.timeout = timeout
        self.baudRate = baudRate
        self.ofs = ofs
        self.slv = slv
    }


}


//
// ScramAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ScramAPI {
    /**
     Get scram hash it
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScramHashIt(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getScramHashItWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get scram hash it
     - GET /interface/scram/hash-it
     - Scram conf iteration counter (i) to be read by client before starting scram login process

     - returns: RequestBuilder<Void> 
     */
    open class func getScramHashItWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/interface/scram/hash-it"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get scram user iteration
     
     - parameter groupId: (path) Group id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScramUserIteration(groupId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getScramUserIterationWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get scram user iteration
     - GET /group/{groupId}/scram-user-iteration
     - SCRAM Hash Iteration: Nombre d'itérations utilisé en SCRAM pour le dernier hashage. Nombre >1000, généré aléatoirement à l'écriture de la conf dans l'IoTize.
     - examples: [{contentType=application/json, example=0}]
     
     - parameter groupId: (path) Group id 

     - returns: RequestBuilder<Int> 
     */
    open class func getScramUserIterationWithRequestBuilder(groupId: Int) -> RequestBuilder<Int> {
        var path = "/group/{groupId}/scram-user-iteration"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get scram user salt
     
     - parameter groupId: (path) Group id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScramUserSalt(groupId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getScramUserSaltWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get scram user salt
     - GET /group/{groupId}/scram-user-salt
     - User-specific salt utilisé (avec le User Name) pour saller les hashs du password StoredKey et ServerKey. Ecrit par Exec/SetPWD
     - examples: [{contentType=application/json, example=0}]
     
     - parameter groupId: (path) Group id 

     - returns: RequestBuilder<Int> 
     */
    open class func getScramUserSaltWithRequestBuilder(groupId: Int) -> RequestBuilder<Int> {
        var path = "/group/{groupId}/scram-user-salt"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start scram communication
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initialize(completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        initializeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start scram communication
     - GET /interface/scram/initialize
     - Demande d'une clé aléatoire et initiation d'une session CCOM cryptée utilisant ce RNG comme clé de cryptage. Accessible uniquement en NFC.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Bytes> 
     */
    open class func initializeWithRequestBuilder() -> RequestBuilder<Bytes> {
        let path = "/interface/scram/initialize"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     First command to initiate scram login, for client to send login and nonce to IoTize, and IoTize to return user salt, user iteration counter (j) and combined nonce
     
     - parameter params: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(params: ScramLoginParams? = nil, completion: @escaping ((_ data: ScramLoginResponseBody?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(params: params).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     First command to initiate scram login, for client to send login and nonce to IoTize, and IoTize to return user salt, user iteration counter (j) and combined nonce
     - GET /interface/scram/login
     - First command to initiate scram login, for client to send login and nonce to IoTize, and IoTize to return user salt, user iteration counter (j) and combined nonce
     - examples: [{contentType=application/json, example={
  "salt" : "",
  "serverNonce" : 0,
  "iterationNumber" : 6
}}]
     
     - parameter params: (body)  (optional)

     - returns: RequestBuilder<ScramLoginResponseBody> 
     */
    open class func loginWithRequestBuilder(params: ScramLoginParams? = nil) -> RequestBuilder<ScramLoginResponseBody> {
        let path = "/interface/scram/login"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ScramLoginResponseBody>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Scram login proof
     
     - parameter params: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginProof(params: Bytes? = nil, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        loginProofWithRequestBuilder(params: params).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Scram login proof
     - GET /interface/scram/login-proof
     - Second command to finalize scram login, for client to send ClientProof and combined nonce
     - examples: [{contentType=application/json, example=""}]
     
     - parameter params: (body)  (optional)

     - returns: RequestBuilder<Bytes> 
     */
    open class func loginProofWithRequestBuilder(params: Bytes? = nil) -> RequestBuilder<Bytes> {
        let path = "/interface/scram/login-proof"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write scram user iteration
     
     - parameter groupId: (path) Group id 
     - parameter value: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScramUserIteration(groupId: Int, value: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putScramUserIterationWithRequestBuilder(groupId: groupId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write scram user iteration
     - PUT /group/{groupId}/scram-user-iteration
     - 
     
     - parameter groupId: (path) Group id 
     - parameter value: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putScramUserIterationWithRequestBuilder(groupId: Int, value: Int? = nil) -> RequestBuilder<Void> {
        var path = "/group/{groupId}/scram-user-iteration"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write scram user salt
     
     - parameter groupId: (path) Group id to return 
     - parameter value: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScramUserSalt(groupId: Int, value: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putScramUserSaltWithRequestBuilder(groupId: groupId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write scram user salt
     - PUT /group/{groupId}/scram-user-salt
     - 
     
     - parameter groupId: (path) Group id to return 
     - parameter value: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putScramUserSaltWithRequestBuilder(groupId: Int, value: Int? = nil) -> RequestBuilder<Void> {
        var path = "/group/{groupId}/scram-user-salt"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Communication channel
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func send(data: Bytes, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        sendWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Communication channel
     - GET /interface/scram/com-send-receive
     - Crypted communication ressource, for sending/receiving commands/responses after the SCRAM or CCOM session is established.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func sendWithRequestBuilder(data: Bytes) -> RequestBuilder<Bytes> {
        let path = "/interface/scram/com-send-receive"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}

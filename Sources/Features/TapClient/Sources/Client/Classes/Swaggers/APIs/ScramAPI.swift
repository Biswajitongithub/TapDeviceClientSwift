//
// ScramAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
// 



open class ScramAPI {


    /**
    * Get scram hash it
    * Scram conf iteration counter (i) to be read by client before starting scram login process
    * LWM2M path: /1024//42
    * @return  api call
    */
    public func getScramHashIt()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/interface/scram/hash-it"
        )
    }
    /**
    * Get scram user iteration
    * SCRAM Hash Iteration: Nombre d&#39;itérations utilisé en SCRAM pour le dernier hashage. Nombre &gt;1000, généré aléatoirement à l&#39;écriture de la conf dans l&#39;IoTize.
    * LWM2M path: /1025/{groupId}/7

    * @param groupId input
    * @return Int api call
    */
    public func getScramUserIteration(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/scram-user-iteration"
            
        )
    }
    /**
    * Get scram user salt
    * User-specific salt utilisé (avec le User Name) pour saller les hashs du password StoredKey et ServerKey. Ecrit par Exec/SetPWD
    * LWM2M path: /1025/{groupId}/16

    * @param groupId input
    * @return Int api call
    */
    public func getScramUserSalt(
        groupId: Int
    ) -> ApiRequest<Int>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/group/{groupId}/scram-user-salt"
            
        )
    }
    /**
    * Start scram communication
    * Demande d&#39;une clé aléatoire et initiation d&#39;une session CCOM cryptée utilisant ce RNG comme clé de cryptage. Accessible uniquement en NFC.
    * LWM2M path: /1024//47
    * @return Bytes api call
    */
    public func initialize()
         -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/interface/scram/initialize"
        )
    }
    /**
    * First command to initiate scram login, for client to send login and nonce to IoTize, and IoTize to return user salt, user iteration counter (j) and combined nonce
    * First command to initiate scram login, for client to send login and nonce to IoTize, and IoTize to return user salt, user iteration counter (j) and combined nonce
    * LWM2M path: /1024//40
    * Body converter id: "ScramLoginParams"

    * @param params input
    * @return ScramLoginResponseBody api call
    */
    public func login(
        params: ScramLoginParams
    ) -> ApiRequest<ScramLoginResponseBody>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/interface/scram/login"
            , body: params
        )
    }
    /**
    * Scram login proof
    * Second command to finalize scram login, for client to send ClientProof and combined nonce
    * LWM2M path: /1024//41
    * Body converter id: "Bytes"

    * @param params input
    * @return Bytes api call
    */
    public func loginProof(
        params: Bytes
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/interface/scram/login-proof"
            , body: params
        )
    }
    /**
    * Write scram user iteration
    * 
    * LWM2M path: /1025/{groupId}/7
    * Body converter id: "integer_uint32"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putScramUserIteration(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/scram-user-iteration"
            
            , body: value
        )
    }
    /**
    * Write scram user salt
    * 
    * LWM2M path: /1025/{groupId}/16
    * Body converter id: "integer_uint32"

    * @param groupId input

    * @param value input
    * @return  api call
    */
    public func putScramUserSalt(
        groupId: Int, value: Int
    ) -> ApiRequest<Void>{
        
        // TODO replace path parameter
        //"groupId": groupId
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/group/{groupId}/scram-user-salt"
            
            , body: value
        )
    }
    /**
    * Communication channel
    * Crypted communication ressource, for sending/receiving commands/responses after the SCRAM or CCOM session is established.
    * LWM2M path: /1024//48
    * Body converter id: "Bytes"

    * @param data input
    * @return Bytes api call
    */
    public func send(
        data: Bytes
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/interface/scram/com-send-receive"
            , body: data
        )
    }

}

//
// BundleAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BundleAPI {
    /**
     Get acls
     
     - parameter bundleId: (path) Bundle id 
     - parameter groupId: (path) Group id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAclgroupId(bundleId: Int, groupId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAclgroupIdWithRequestBuilder(bundleId: bundleId, groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get acls
     - GET /bundle/{bundleId}/acl/{groupId}
     
     - parameter bundleId: (path) Bundle id 
     - parameter groupId: (path) Group id 

     - returns: RequestBuilder<Void> 
     */
    open class func getAclgroupIdWithRequestBuilder(bundleId: Int, groupId: Int) -> RequestBuilder<Void> {
        var path = "/bundle/{bundleId}/acl/{groupId}"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get datalog period
     
     - parameter bundleId: (path) 0 : no Data log for this bundle (-1) : Log this bundle whenever one of its variables changesOther values : number of minutes between each log (… if there is a change in value?) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDatalogPeriod(bundleId: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getDatalogPeriodWithRequestBuilder(bundleId: bundleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get datalog period
     - GET /bundle/{bundleId}/datalog-period
     - examples: [{contentType=application/json, example=0}]
     
     - parameter bundleId: (path) 0 : no Data log for this bundle (-1) : Log this bundle whenever one of its variables changesOther values : number of minutes between each log (… if there is a change in value?) 

     - returns: RequestBuilder<Int> 
     */
    open class func getDatalogPeriodWithRequestBuilder(bundleId: Int) -> RequestBuilder<Int> {
        var path = "/bundle/{bundleId}/datalog-period"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get bundle values
     
     - parameter bundleId: (path) Bundle id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getValues(bundleId: Int, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getValuesWithRequestBuilder(bundleId: bundleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get bundle values
     - GET /bundle/{bundleId}/values
     - examples: [{contentType=application/json, example=""}]
     
     - parameter bundleId: (path) Bundle id 

     - returns: RequestBuilder<Bytes> 
     */
    open class func getValuesWithRequestBuilder(bundleId: Int) -> RequestBuilder<Bytes> {
        var path = "/bundle/{bundleId}/values"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write acls
     
     - parameter bundleId: (path) Group id 
     - parameter groupId: (path) Group id 
     - parameter rights: (body) Rights 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAclgroupId(bundleId: Int, groupId: Int, rights: ReadWriteRights, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAclgroupIdWithRequestBuilder(bundleId: bundleId, groupId: groupId, rights: rights).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write acls
     - PUT /bundle/{bundleId}/acl/{groupId}
     
     - parameter bundleId: (path) Group id 
     - parameter groupId: (path) Group id 
     - parameter rights: (body) Rights 

     - returns: RequestBuilder<Void> 
     */
    open class func putAclgroupIdWithRequestBuilder(bundleId: Int, groupId: Int, rights: ReadWriteRights) -> RequestBuilder<Void> {
        var path = "/bundle/{bundleId}/acl/{groupId}"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rights)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write datalog period
     
     - parameter bundleId: (path) Bundle id 
     - parameter value: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putDatalogPeriod(bundleId: Int, value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putDatalogPeriodWithRequestBuilder(bundleId: bundleId, value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write datalog period
     - PUT /bundle/{bundleId}/datalog-period
     
     - parameter bundleId: (path) Bundle id 
     - parameter value: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putDatalogPeriodWithRequestBuilder(bundleId: Int, value: Int) -> RequestBuilder<Void> {
        var path = "/bundle/{bundleId}/datalog-period"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

//
// TargetAPI.swift
//
// Generated by iotize device api codegen
//

import Foundation
// 



open class TargetAPI {


    /**
    * Clear communication stats 
    * 
    * LWM2M path: /1027//11
    * @return  api call
    */
    public func clearComStats()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/com-stats"
        )
    }
    /**
    * Connect to target
    * 
    * LWM2M path: /1027//3
    * @return  api call
    */
    public func connect()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/connect"
        )
    }
    /**
    * Disconnect from target
    * 
    * LWM2M path: /1027//4
    * @return  api call
    */
    public func disconnect()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/disconnect"
        )
    }
    /**
    * Get communication stats
    * Get Nb of failed communications and number of successful communications with Target
    * LWM2M path: /1027//11
    * @return TargetComStats api call
    */
    public func getComStats()
         -> ApiRequest<TargetComStats>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/com-stats"
        )
    }
    /**
    * Get core type
    * 
    * LWM2M path: /1027//2
    * @return TargetCoreType api call
    */
    public func getCoreType()
         -> ApiRequest<TargetCoreType>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/core-type"
        )
    }
    /**
    * Debug access
    * Access registres de contrôle (SWD&#x3D;&gt;APDP) de la cible.  Accès conditionné par les ACLs du Bundle Debug (-2)
    * LWM2M path: /1027//31
    * @return  api call
    */
    public func getDebugAccess()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/debug-access"
        )
    }
    /**
    * Get firmware version
    * 
    * LWM2M path: /1027//6
    * @return String api call
    */
    public func getFirmwareVersion()
         -> ApiRequest<String>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/firmware-version"
        )
    }
    /**
    * Get max voltage
    * 
    * LWM2M path: /1027//9
    * @return Int api call
    */
    public func getMaxVoltage()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/max-voltage"
        )
    }
    /**
    * Get min voltage
    * 
    * LWM2M path: /1027//8
    * @return Int api call
    */
    public func getMinVoltage()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/min-voltage"
        )
    }
    /**
    * Get current sub protocol
    * 
    * LWM2M path: /1027//40
    * @return Bytes api call
    */
    public func getModbusSubProtocol()
         -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/modbus/sub-protocol"
        )
    }
    /**
    * Get page size
    * Alignement page (TAR)
    * LWM2M path: /1027//10
    * @return Int api call
    */
    public func getPageSize()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/page-size"
        )
    }
    /**
    * Get target protocol
    * 
    * LWM2M path: /1027//1
    * @return TargetProtocol api call
    */
    public func getProtocol()
         -> ApiRequest<TargetProtocol>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/protocol"
        )
    }
    /**
    * List available target protocols
    * 
    * LWM2M path: /1027//20
    * @return ListTargetProtocol api call
    */
    public func getProtocolList()
         -> ApiRequest<ListTargetProtocol>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/protocol/list"
        )
    }
    /**
    * Register access
    * Access registres (Cortex&#x3D;&gt;R0...R15) de la cible.  Accès conditionné par les ACLs du Bundle Debug (-2)
    * LWM2M path: /1027//32
    * @return  api call
    */
    public func getRegAccess()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/reg-access"
        )
    }
    /**
    * Données de config du protocole (baudrate MODBus, chainage JTAG, etc.) Taille variable, fixée au premier write après le reset factory. 
    * 
    * LWM2M path: /1027//21
    * @return UartSettings api call
    */
    public func getUARTSettings()
         -> ApiRequest<UartSettings>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/uart/settings"
        )
    }
    /**
    * Get vcc
    * Lit la valeur de la tension de la cible
    * LWM2M path: /1027//7
    * @return Int api call
    */
    public func getVcc()
         -> ApiRequest<Int>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/vcc"
        )
    }
    /**
    * Generic modbus read
    * 
    * LWM2M path: /1027//38
    * Body converter id: "MemoryInfo"

    * @param data input
    * @return Bytes api call
    */
    public func modbusRead(
        data: MemoryInfo
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/modbus/read"
            , body: data
        )
    }
    /**
    * Generic modbus write
    * 
    * LWM2M path: /1027//37
    * Body converter id: "MemoryWriteInfo"

    * @param data input
    * @return  api call
    */
    public func modbusWrite(
        data: MemoryWriteInfo
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/modbus/write"
            , body: data
        )
    }
    /**
    * Perform actions to ADP target.
    * 
    * LWM2M path: /1027//39
    * Body converter id: "Bytes"

    * @param data input
    * @return  api call
    */
    public func postAdpAction(
        data: Bytes
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/adp/action"
            , body: data
        )
    }
    /**
    * ???
    * 
    * LWM2M path: /1027//31
    * @return  api call
    */
    public func postDebugAccess()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/debug-access"
        )
    }
    /**
    * Set current sub protocol
    * 
    * LWM2M path: /1027//40
    * Body converter id: "Bytes"

    * @param data input
    * @return  api call
    */
    public func postModbusSubProtocol(
        data: Bytes
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/modbus/sub-protocol"
            , body: data
        )
    }
    /**
    * ???
    * 
    * LWM2M path: /1027//32
    * @return  api call
    */
    public func postRegAccess()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/reg-access"
        )
    }
    /**
    * Reset target
    * Reset de la cible (RST&#x3D;0) et maintient en Reset. Le relachement se fait par Reset (plus haut). Accès conditionné par les ACLs du Bundle réservé Debug (-2) si il existe, sinon Admin seulement
    * LWM2M path: /1027//30
    * @return  api call
    */
    public func postResetKeep()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/reset-keep"
        )
    }
    /**
    * Write core type
    * 
    * LWM2M path: /1027//2
    * Body converter id: "TargetCoreType"

    * @param value input
    * @return  api call
    */
    public func putCoreType(
        value: TargetCoreType
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/core-type"
            , body: value
        )
    }
    /**
    * Write firmware version
    * 
    * LWM2M path: /1027//6
    * Body converter id: "integer_uint32"

    * @param value input
    * @return  api call
    */
    public func putFirmwareVersion(
        value: Int
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/firmware-version"
            , body: value
        )
    }
    /**
    * Write max voltage value
    * 
    * LWM2M path: /1027//9
    * Body converter id: "integer_uint16"

    * @param value input
    * @return  api call
    */
    public func putMaxVoltage(
        value: Int
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/max-voltage"
            , body: value
        )
    }
    /**
    * Write min voltage value
    * 
    * LWM2M path: /1027//8
    * Body converter id: "integer_uint16"

    * @param value input
    * @return  api call
    */
    public func putMinVoltage(
        value: Int
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/min-voltage"
            , body: value
        )
    }
    /**
    * Write page size
    * 
    * LWM2M path: /1027//10
    * Body converter id: "integer_uint32"

    * @param value input
    * @return  api call
    */
    public func putPageSize(
        value: Int
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/page-size"
            , body: value
        )
    }
    /**
    * Write target protocol
    * 
    * LWM2M path: /1027//1
    * Body converter id: "TargetProtocol"

    * @param targetProtocol input
    * @return  api call
    */
    public func putProtocol(
        targetProtocol: TargetProtocol
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/protocol"
            , body: targetProtocol
        )
    }
    /**
    * Read memory on target
    * 
    * LWM2M path: /1030//13
    * Body converter id: "MemoryInfo"

    * @param value input
    * @return Bytes api call
    */
    public func readAddress(
        value: MemoryInfo
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/memaccess"
            , body: value
        )
    }
    /**
    * Read data transparent mode with limit
    * Lecture de données de la target en mode transparent ou semi-transparent   si il y en a, sans attente.
    * LWM2M path: /1027//35
    * Body converter id: "integer_uint32"

    * @param nbBytes input
    * @return Bytes api call
    */
    public func readBytes(
        nbBytes: Int
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/transparent/read-bytes"
            , body: nbBytes
        )
    }
    /**
    * Reset target
    * Reset de la cible. (Reset &#x3D;0, wait, Reset &#x3D; 1) utilisé pour relacher le reset après utilisation de ResetKeep.  Accès conditionné par les ACLs du Bundle Debug (-2)
    * LWM2M path: /1027//5
    * @return  api call
    */
    public func reset()
         -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/reset"
        )
    }
    /**
    * Transparent send
    * Send data to the target application
    * LWM2M path: /1027//34
    * Body converter id: "Bytes"

    * @param data input
    * @return Bytes api call
    */
    public func send(
        data: Bytes
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/transparent/send"
            , body: data
        )
    }
    /**
    * Transparent send and receive
    * Send data to the target application and expect response length
    * LWM2M path: /1027//34
    * Body converter id: "integer_uint16"

    * @param responseLength input
    * @return Bytes api call
    */
    public func sendReceive(
        responseLength: Int
    ) -> ApiRequest<Bytes>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.GET
            , path: "/target/transparent/send-receive"
            , body: responseLength
        )
    }
    /**
    * Temporary update configuration
    * Execute permet de changer la valeur (mais pas la taille) courante de manière temporaire. Elle sera réinitialisée au reset d&#39;après la valeur configurée.
    * LWM2M path: /1027//21
    * Body converter id: "UartSettings"

    * @param value input
    * @return  api call
    */
    public func setUARTSettings(
        value: UartSettings
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/uart/settings"
            , body: value
        )
    }
    /**
    * Write into memory on target
    * 
    * LWM2M path: /1030//13
    * Body converter id: "MemoryWriteInfo"

    * @param value input
    * @return  api call
    */
    public func writeAddress(
        value: MemoryWriteInfo
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.POST
            , path: "/target/memaccess"
            , body: value
        )
    }
    /**
    * Update configuration
    * Put permet de changer la valeur (mais pas la taille) courante de manière permanente
    * LWM2M path: /1027//21
    * Body converter id: "UartSettings"

    * @param value input
    * @return  api call
    */
    public func writeUARTSettings(
        value: UartSettings
    ) -> ApiRequest<Void>{
        

        return ApiRequest(
            method: TapRequestHeader.MethodType.PUT
            , path: "/target/uart/settings"
            , body: value
        )
    }

}

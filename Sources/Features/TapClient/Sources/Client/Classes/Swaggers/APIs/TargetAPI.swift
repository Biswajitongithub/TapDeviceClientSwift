//
// TargetAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TargetAPI {
    /**
     Clear communication stats 
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clearComStats(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        clearComStatsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Clear communication stats 
     - POST /target/com-stats
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func clearComStatsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/com-stats"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Connect to target
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connect(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        connectWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Connect to target
     - POST /target/connect
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func connectWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/connect"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disconnect from target
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disconnect(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disconnectWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Disconnect from target
     - POST /target/disconnect
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func disconnectWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/disconnect"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get communication stats
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComStats(completion: @escaping ((_ data: TargetComStats?,_ error: Error?) -> Void)) {
        getComStatsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get communication stats
     - GET /target/com-stats
     - Get Nb of failed communications and number of successful communications with Target
     - examples: [{contentType=application/json, example={
  "nbFailCom" : 0,
  "nbSuccessfulCom" : 6
}}]

     - returns: RequestBuilder<TargetComStats> 
     */
    open class func getComStatsWithRequestBuilder() -> RequestBuilder<TargetComStats> {
        let path = "/target/com-stats"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TargetComStats>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get core type
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoreType(completion: @escaping ((_ data: TargetCoreType?,_ error: Error?) -> Void)) {
        getCoreTypeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get core type
     - GET /target/core-type
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<TargetCoreType> 
     */
    open class func getCoreTypeWithRequestBuilder() -> RequestBuilder<TargetCoreType> {
        let path = "/target/core-type"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TargetCoreType>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Debug access
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDebugAccess(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDebugAccessWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Debug access
     - GET /target/debug-access
     - Access registres de contrôle (SWD=>APDP) de la cible.  Accès conditionné par les ACLs du Bundle Debug (-2)

     - returns: RequestBuilder<Void> 
     */
    open class func getDebugAccessWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/debug-access"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get firmware version
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFirmwareVersion(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFirmwareVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get firmware version
     - GET /target/firmware-version
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func getFirmwareVersionWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/target/firmware-version"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get max voltage
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMaxVoltage(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getMaxVoltageWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get max voltage
     - GET /target/max-voltage
     - 
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getMaxVoltageWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/target/max-voltage"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get min voltage
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMinVoltage(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getMinVoltageWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get min voltage
     - GET /target/min-voltage
     - 
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getMinVoltageWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/target/min-voltage"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get current sub protocol
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModbusSubProtocol(completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        getModbusSubProtocolWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get current sub protocol
     - GET /target/modbus/sub-protocol
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Bytes> 
     */
    open class func getModbusSubProtocolWithRequestBuilder() -> RequestBuilder<Bytes> {
        let path = "/target/modbus/sub-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get page size
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPageSize(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getPageSizeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get page size
     - GET /target/page-size
     - Alignement page (TAR)
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getPageSizeWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/target/page-size"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get target protocol
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProtocol(completion: @escaping ((_ data: TargetProtocol?,_ error: Error?) -> Void)) {
        getProtocolWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get target protocol
     - GET /target/protocol
     - 
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<TargetProtocol> 
     */
    open class func getProtocolWithRequestBuilder() -> RequestBuilder<TargetProtocol> {
        let path = "/target/protocol"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TargetProtocol>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List available target protocols
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProtocolList(completion: @escaping ((_ data: ListTargetProtocol?,_ error: Error?) -> Void)) {
        getProtocolListWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List available target protocols
     - GET /target/protocol/list
     - 
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<ListTargetProtocol> 
     */
    open class func getProtocolListWithRequestBuilder() -> RequestBuilder<ListTargetProtocol> {
        let path = "/target/protocol/list"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ListTargetProtocol>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register access
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRegAccess(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getRegAccessWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Register access
     - GET /target/reg-access
     - Access registres (Cortex=>R0...R15) de la cible.  Accès conditionné par les ACLs du Bundle Debug (-2)

     - returns: RequestBuilder<Void> 
     */
    open class func getRegAccessWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/reg-access"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Données de config du protocole (baudrate MODBus, chainage JTAG, etc.) Taille variable, fixée au premier write après le reset factory. 
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUARTSettings(completion: @escaping ((_ data: UartSettings?,_ error: Error?) -> Void)) {
        getUARTSettingsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Données de config du protocole (baudrate MODBus, chainage JTAG, etc.) Taille variable, fixée au premier write après le reset factory. 
     - GET /target/uart/settings
     - 
     - examples: [{contentType=application/json, example={
  "baudRate" : 1,
  "dataBitsLength" : 0.80082819046101150206595775671303272247314453125,
  "handshake" : "NONE",
  "handshakeDelimiter" : "NONE",
  "stopBit" : "ONE",
  "bitParity" : "EVEN",
  "slv" : 5,
  "ofs" : 5,
  "timeout" : 6,
  "physicalPort" : "NONE"
}}]

     - returns: RequestBuilder<UartSettings> 
     */
    open class func getUARTSettingsWithRequestBuilder() -> RequestBuilder<UartSettings> {
        let path = "/target/uart/settings"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UartSettings>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get vcc
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVcc(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getVccWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get vcc
     - GET /target/vcc
     - Lit la valeur de la tension de la cible
     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func getVccWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/target/vcc"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Generic modbus read
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modbusRead(data: MemoryInfo, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        modbusReadWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generic modbus read
     - GET /target/modbus/read
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func modbusReadWithRequestBuilder(data: MemoryInfo) -> RequestBuilder<Bytes> {
        let path = "/target/modbus/read"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Generic modbus write
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modbusWrite(data: MemoryWriteInfo, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        modbusWriteWithRequestBuilder(data: data).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Generic modbus write
     - GET /target/modbus/write
     
     - parameter data: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func modbusWriteWithRequestBuilder(data: MemoryWriteInfo) -> RequestBuilder<Void> {
        let path = "/target/modbus/write"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Perform actions to ADP target.
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAdpAction(data: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postAdpActionWithRequestBuilder(data: data).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Perform actions to ADP target.
     - POST /target/adp/action
     
     - parameter data: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postAdpActionWithRequestBuilder(data: Bytes) -> RequestBuilder<Void> {
        let path = "/target/adp/action"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     ???
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDebugAccess(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDebugAccessWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     ???
     - POST /target/debug-access
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func postDebugAccessWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/debug-access"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set current sub protocol
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postModbusSubProtocol(data: Bytes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postModbusSubProtocolWithRequestBuilder(data: data).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set current sub protocol
     - POST /target/modbus/sub-protocol
     
     - parameter data: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postModbusSubProtocolWithRequestBuilder(data: Bytes) -> RequestBuilder<Void> {
        let path = "/target/modbus/sub-protocol"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     ???
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRegAccess(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postRegAccessWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     ???
     - POST /target/reg-access
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func postRegAccessWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/reg-access"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reset target
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResetKeep(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postResetKeepWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset target
     - POST /target/reset-keep
     - Reset de la cible (RST=0) et maintient en Reset. Le relachement se fait par Reset (plus haut). Accès conditionné par les ACLs du Bundle réservé Debug (-2) si il existe, sinon Admin seulement

     - returns: RequestBuilder<Void> 
     */
    open class func postResetKeepWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/reset-keep"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write core type
     
     - parameter value: (body) Write core type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCoreType(value: TargetCoreType, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCoreTypeWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write core type
     - PUT /target/core-type
     - 
     
     - parameter value: (body) Write core type 

     - returns: RequestBuilder<Void> 
     */
    open class func putCoreTypeWithRequestBuilder(value: TargetCoreType) -> RequestBuilder<Void> {
        let path = "/target/core-type"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write firmware version
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFirmwareVersion(value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFirmwareVersionWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write firmware version
     - PUT /target/firmware-version
     - 
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putFirmwareVersionWithRequestBuilder(value: Int) -> RequestBuilder<Void> {
        let path = "/target/firmware-version"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write max voltage value
     
     - parameter value: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMaxVoltage(value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMaxVoltageWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write max voltage value
     - PUT /target/max-voltage
     - 
     
     - parameter value: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putMaxVoltageWithRequestBuilder(value: Int) -> RequestBuilder<Void> {
        let path = "/target/max-voltage"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write min voltage value
     
     - parameter value: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMinVoltage(value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMinVoltageWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write min voltage value
     - PUT /target/min-voltage
     - 
     
     - parameter value: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putMinVoltageWithRequestBuilder(value: Int) -> RequestBuilder<Void> {
        let path = "/target/min-voltage"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write page size
     
     - parameter value: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putPageSize(value: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putPageSizeWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write page size
     - PUT /target/page-size
     - 
     
     - parameter value: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func putPageSizeWithRequestBuilder(value: Int) -> RequestBuilder<Void> {
        let path = "/target/page-size"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write target protocol
     
     - parameter targetProtocol: (body) TargetProtocol object to set 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putProtocol(targetProtocol: TargetProtocol, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putProtocolWithRequestBuilder(targetProtocol: targetProtocol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write target protocol
     - PUT /target/protocol
     - 
     
     - parameter targetProtocol: (body) TargetProtocol object to set 

     - returns: RequestBuilder<Void> 
     */
    open class func putProtocolWithRequestBuilder(targetProtocol: TargetProtocol) -> RequestBuilder<Void> {
        let path = "/target/protocol"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: targetProtocol)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Read memory on target
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readAddress(value: MemoryInfo, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        readAddressWithRequestBuilder(value: value).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read memory on target
     - GET /target/memaccess
     - examples: [{contentType=application/json, example=""}]
     
     - parameter value: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func readAddressWithRequestBuilder(value: MemoryInfo) -> RequestBuilder<Bytes> {
        let path = "/target/memaccess"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Read data transparent mode with limit
     
     - parameter nbBytes: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readBytes(nbBytes: Int? = nil, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        readBytesWithRequestBuilder(nbBytes: nbBytes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read data transparent mode with limit
     - GET /target/transparent/read-bytes
     - Lecture de données de la target en mode transparent ou semi-transparent   si il y en a, sans attente.
     - examples: [{contentType=application/json, example=""}]
     
     - parameter nbBytes: (body)  (optional)

     - returns: RequestBuilder<Bytes> 
     */
    open class func readBytesWithRequestBuilder(nbBytes: Int? = nil) -> RequestBuilder<Bytes> {
        let path = "/target/transparent/read-bytes"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nbBytes)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset target
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reset(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset target
     - POST /target/reset
     - Reset de la cible. (Reset =0, wait, Reset = 1) utilisé pour relacher le reset après utilisation de ResetKeep.  Accès conditionné par les ACLs du Bundle Debug (-2)

     - returns: RequestBuilder<Void> 
     */
    open class func resetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/target/reset"
        let URLString = ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transparent send
     
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func send(data: Bytes, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        sendWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transparent send
     - POST /target/transparent/send
     - Send data to the target application
     - examples: [{contentType=application/json, example=""}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func sendWithRequestBuilder(data: Bytes) -> RequestBuilder<Bytes> {
        let path = "/target/transparent/send"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Transparent send and receive
     
     - parameter responseLength: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendReceive(responseLength: Int, completion: @escaping ((_ data: Bytes?,_ error: Error?) -> Void)) {
        sendReceiveWithRequestBuilder(responseLength: responseLength).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transparent send and receive
     - GET /target/transparent/send-receive
     - Send data to the target application and expect response length
     - examples: [{contentType=application/json, example=""}]
     
     - parameter responseLength: (body)  

     - returns: RequestBuilder<Bytes> 
     */
    open class func sendReceiveWithRequestBuilder(responseLength: Int) -> RequestBuilder<Bytes> {
        let path = "/target/transparent/send-receive"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: responseLength)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bytes>.Type = ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Temporary update configuration
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setUARTSettings(value: UartSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setUARTSettingsWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Temporary update configuration
     - POST /target/uart/settings
     - Execute permet de changer la valeur (mais pas la taille) courante de manière temporaire. Elle sera réinitialisée au reset d'après la valeur configurée.
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func setUARTSettingsWithRequestBuilder(value: UartSettings) -> RequestBuilder<Void> {
        let path = "/target/uart/settings"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Write into memory on target
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func writeAddress(value: MemoryWriteInfo, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        writeAddressWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Write into memory on target
     - POST /target/memaccess
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func writeAddressWithRequestBuilder(value: MemoryWriteInfo) -> RequestBuilder<Void> {
        let path = "/target/memaccess"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update configuration
     
     - parameter value: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func writeUARTSettings(value: UartSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        writeUARTSettingsWithRequestBuilder(value: value).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update configuration
     - PUT /target/uart/settings
     - Put permet de changer la valeur (mais pas la taille) courante de manière permanente
     
     - parameter value: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func writeUARTSettingsWithRequestBuilder(value: UartSettings) -> RequestBuilder<Void> {
        let path = "/target/uart/settings"
        let URLString = ClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
